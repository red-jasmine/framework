---
description: 
globs: 
alwaysApply: true
---
你是Laravel、PHP、DDD和相关web开发技术的专家。
核心原则
-用准确的PHP/Laravel。
-优先考虑面向对象编程和干净架构的SOLID原则。
-遵循PHP和Laravel的最佳实践，确保一致性和可读性。
-设计可扩展性和可维护性，确保系统能够轻松增长。
-比起重复，更喜欢迭代和模块化，以促进代码重用。
-为变量、方法和类使用一致和描述性的名称，以提高可读性。
依赖关系
-依赖关系管理编辑器
-PHP 8.3+
-Laravel 12.0+
PHP和Laravel标准
-在适当的时候利用PHP 8.3+功能（例如，类型化属性、匹配表达式）。
-遵守PSR-12编码标准，实现一致的代码风格。
-利用Laravel的内置功能和助手来最大限度地提高效率。
-遵循Laravel的目录结构和文件命名约定。
-实施稳健的错误处理和日志记录：
>使用Laravel的异常处理和日志记录功能。
>必要时创建自定义例外。
>对预期的异常使用try-catch块。
-使用Laravel的表单和请求数据验证功能。
-实现用于请求过滤和修改的中间件。
-利用Laravel的Eloquent ORM进行数据库交互。
-使用Laravel的查询构建器进行复杂的数据库操作。
-创建和维护适当的数据库迁移和种子。
Laravel最佳实践
-尽可能在原始SQL查询上使用Eloquent ORM和查询生成器
-实现 DDD 模式，以实现更好的代码组织和可重用性
-利用Laravel内置的身份验证和授权功能（Policy）
-利用Laravel的缓存机制（Redis、Memcached）来提高性能
-使用作业队列和Laravel Horizon来处理长时间运行的任务和后台处理
-使用PHPUnit和Laravel Dusk进行单元、功能和浏览器测试的全面测试
-使用API资源和版本控制来构建健壮且可维护的API
-使用Laravel的异常处理程序和日志外观实现正确的错误处理和日志记录
-利用Laravel的验证功能，包括Form Requests，实现数据完整性
-实现数据库索引并使用Laravel的查询优化功能以获得更好的性能
-在开发中使用Laravel Telescope进行调试和性能监控
-实施适当的安全措施，包括CSRF保护、XSS预防和输入净化
代码架构
*命名约定：
-对文件夹、类和文件使用一致的命名约定。
-遵循Laravel的约定：模型为单数，控制器为复数（例如User.php、UsersController.php）。
-类名使用PascalCase，方法名使用camelCase，数据库列使用snake_case。
*控制器设计：
-控制器应该是最终类，以防止继承。
-使控制器为只读（即没有属性突变）。
-避免将依赖项直接注入控制器。相反，使用方法注入或服务类。
*模型设计：
-模型应该是最终类，以确保数据完整性并防止继承的意外行为。
*路由：
-保持一致和有组织的路线。
-为每个主要模型或要素区域创建单独的管线文件。
-将相关路由分组在一起（例如，routes/user.php中的所有用户相关路由）。
*类型声明：
-始终对方法和函数使用显式返回类型声明。
-对方法参数使用适当的PHP类型提示。
-必要时利用PHP 8.3+的特性，如联合类型和可空类型。
*数据类型一致性：
-在整个代码库中与数据类型声明保持一致和明确。
-对属性、方法参数和返回类型使用类型提示。
-利用PHP的严格类型，及早发现与类型相关的错误。
*错误处理：
-使用Laravel的异常处理和日志记录功能来处理异常。
-必要时创建自定义例外。
-对预期的异常使用try-catch块。
-优雅地处理异常并返回适当的响应。
要点
-遵循Laravel的 DDD 架构，实现应用层、领域层、基础设施层、用户接口层的清晰分离。
-使用Form Requests实施请求验证，以确保安全和经过验证的数据输入。
-确保REST API遵循Laravel标准，使用API资源进行结构化和一致的响应。
-利用任务调度和事件侦听器自动化重复任务并解耦逻辑。
-使用Laravel的数据库外观实现数据库事务，以确保数据一致性。
-使用Eloquent ORM进行数据库交互、强制关系和优化查询。
-实现API版本控制以实现可维护性和向后兼容性。
-使用Redis和Memcached等缓存机制优化性能。


-使用Laravel的异常处理程序和日志功能确保稳健的错误处理和日志记录