---
alwaysApply: true
---
# 应用层(Application)代码规范

## 应用服务 (ApplicationService)

### 规范
- **基类继承**: 继承 `RedJasmine\Support\Application\ApplicationService`
- **依赖注入**: 通过构造函数注入仓库和转换器，使用 public 可见性
- **静态属性**: 定义 `$modelClass`、`$macros` 和 `$hookNamePrefix`
- **宏扩展**: 使用 `$macros` 数组扩展自定义方法
- **Hook机制**: 使用 hook 方法实现扩展点管理

### 原则
- 如果实体的应用服务只有简单的 CURD 那么直接继承基类完善配置即可
### 代码示例
```php
class ArticleApplicationService extends ApplicationService
{
    public static string $hookNamePrefix = 'article.application';
    protected static string $modelClass = Article::class;
    
    public function __construct(
        public ArticleRepositoryInterface $repository,
        public ArticleTransformer $transformer
    ) {
    }
    
    protected static $macros = [
        'create' => ArticleCreateCommandHandler::class,
        'update' => ArticleUpdateCommandHandler::class,
        'publish' => ArticlePublishCommandHandler::class,
    ];
}
```

## 命令 (Commands)

### 规范
- **基类继承**: 继承领域层的基础DTO 或者 继承 `RedJasmine\Support\Data\Data`
- **用户对象**: 类型定义为 `RedJasmine\Support\Contracts\UserInterface`
- **命名规范**: 命令名格式为 `{Action}Command`

### 代码示例
```php
class ArticleCreateCommand extends ArticleData
{
    public UserInterface $owner;
    public string $title;
    public string $content;
}
```

## 查询 (Queries)

### 规范
- **基类继承**: 继承 `RedJasmine\Support\Application\Queries\Query`
- **分页查询**: 继承 `RedJasmine\Support\Application\Queries\PaginateQuery`
- **单个查询**: 继承 `RedJasmine\Support\Application\Queries\FindQuery`
- **命名规范**: 查询名格式为 `{Action}Query`

### 代码示例
```php
class ArticleListQuery extends PaginateQuery
{
    public ?string $title = null;
    public ?int $categoryId = null;
}
```

## 命令处理器 (CommandHandlers)

### 规范
- **基类继承**: 继承 `RedJasmine\Support\Application\Commands\CommandHandler`
- **依赖注入**: 通过构造函数注入应用服务
- **事务处理**: 使用数据库事务确保数据一致性
- **异常处理**: 捕获并重新抛出异常，确保事务回滚
- **命名规范**: 处理器名格式为 `{Action}CommandHandler`

### 代码示例
```php
class ArticleCreateCommandHandler extends CommandHandler
{
    public function __construct(
        protected ArticleApplicationService $service
    ) {
    }

    public function handle(ArticleCreateCommand $command): Article
    {
        $this->beginDatabaseTransaction();
        
        try {
            $model = $this->service->newModel();
            $model = $this->service->transformer->transform($command, $model);
            $this->service->repository->store($model);
            
            $this->commitDatabaseTransaction();
            return $model;
        } catch (Throwable $throwable) {
            $this->rollBackDatabaseTransaction();
            throw $throwable;
        }
    }
}
```

## 查询处理器 (QueryHandlers)

### 规范
- **基类继承**: 继承 `RedJasmine\Support\Application\Queries\QueryHandler`
- **只读操作**: 只进行数据查询，不进行写操作
- **分页支持**: 支持分页查询功能
- **过滤器**: 提供灵活的查询过滤器
- **命名规范**: 处理器名格式为 `{Action}QueryHandler`

### 代码示例
```php
class ArticleListQueryHandler extends QueryHandler
{
    public function __construct(
        protected ArticleRepositoryInterface $repository
    ) {
    }

    public function handle(ArticleListQuery $query): LengthAwarePaginator
    {
        return $this->repository->paginate($query);
    }
}
```

## 命令处理器基类

### 规范
- **基类继承**: 继承 `RedJasmine\Support\Application\Commands\CommandHandler`
- **共享逻辑**: 提供子类共用的验证和处理逻辑
- **依赖注入**: 注入相关的应用服务和领域服务
- **验证方法**: 提供统一的验证方法
- **事务处理**: 统一事务管理逻辑

### 代码示例
```php
class ArticleCommandHandler extends CommandHandler
{
    public function __construct(
        public ArticleApplicationService $service,
        protected CategoryApplicationService $categoryService,
        protected ArticleTransformer $transformer
    ) {
    }

    protected function validate(ArticleData $command): void
    {
        $this->validateCategory($command);
        $this->validateTitle($command);
    }

    protected function validateCategory(ArticleData $command): void
    {
        if ($command->categoryId && !$this->categoryService->exists($command->categoryId)) {
            throw new ArticleException('分类不存在');
        }
    }
}
```
# 应用层(Application)代码规范

## 应用服务 (ApplicationService)

### 规范
- **基类继承**: 继承 `RedJasmine\Support\Application\ApplicationService`
- **依赖注入**: 通过构造函数注入仓库和转换器，使用 public 可见性
- **静态属性**: 定义 `$modelClass`、`$macros` 和 `$hookNamePrefix`
- **宏扩展**: 使用 `$macros` 数组扩展自定义方法
- **Hook机制**: 使用 hook 方法实现扩展点管理

### 代码示例
```php
class ArticleApplicationService extends ApplicationService
{
    public static string $hookNamePrefix = 'article.application';
    protected static string $modelClass = Article::class;
    
    public function __construct(
        public ArticleRepositoryInterface $repository,
        public ArticleTransformer $transformer
    ) {
    }
    
    protected static $macros = [
        'create' => ArticleCreateCommandHandler::class,
        'update' => ArticleUpdateCommandHandler::class,
        'publish' => ArticlePublishCommandHandler::class,
    ];
}
```

## 命令 (Commands)

### 规范
- **基类继承**: 继承领域层的基础DTO 或者 继承 `RedJasmine\Support\Data\Data`
- **用户对象**: 类型定义为 `RedJasmine\Support\Contracts\UserInterface`
- **命名规范**: 命令名格式为 `{Action}Command`

### 代码示例
```php
class ArticleCreateCommand extends ArticleData
{
    public UserInterface $owner;
    public string $title;
    public string $content;
}
```

## 查询 (Queries)

### 规范
- **基类继承**: 继承 `RedJasmine\Support\Application\Queries\Query`
- **分页查询**: 继承 `RedJasmine\Support\Application\Queries\PaginationQuery`
- **单个查询**: 继承 `RedJasmine\Support\Application\Queries\FindQuery`
- **命名规范**: 查询名格式为 `{Action}Query`

### 代码示例
```php
class ArticleListQuery extends PaginationQuery
{
    public ?string $title = null;
    public ?int $categoryId = null;
}
```

## 命令处理器 (CommandHandlers)

### 规范
- **基类继承**: 继承 `RedJasmine\Support\Application\Commands\CommandHandler`
- **依赖注入**: 通过构造函数注入应用服务
- **事务处理**: 使用数据库事务确保数据一致性
- **异常处理**: 捕获并重新抛出异常，确保事务回滚
- **命名规范**: 处理器名格式为 `{Action}CommandHandler`

### 代码示例
```php
class ArticleCreateCommandHandler extends CommandHandler
{
    public function __construct(
        protected ArticleApplicationService $service
    ) {
    }

    public function handle(ArticleCreateCommand $command): Article
    {
        $this->beginDatabaseTransaction();
        
        try {
            $model = $this->service->newModel();
            $model = $this->service->transformer->transform($command, $model);
            $this->service->repository->store($model);
            
            $this->commitDatabaseTransaction();
            return $model;
        } catch (Throwable $throwable) {
            $this->rollBackDatabaseTransaction();
            throw $throwable;
        }
    }
}
```

## 查询处理器 (QueryHandlers)

### 规范
- **基类继承**: 继承 `RedJasmine\Support\Application\Queries\QueryHandler`
- **只读操作**: 只进行数据查询，不进行写操作
- **分页支持**: 支持分页查询功能
- **过滤器**: 提供灵活的查询过滤器
- **命名规范**: 处理器名格式为 `{Action}QueryHandler`

### 代码示例
```php
class ArticleListQueryHandler extends QueryHandler
{
    public function __construct(
        protected ArticleRepositoryInterface $repository
    ) {
    }

    public function handle(ArticleListQuery $query): LengthAwarePaginator
    {
        return $this->repository->paginate($query);
    }
}
```

## 命令处理器基类

### 规范
- **基类继承**: 继承 `RedJasmine\Support\Application\Commands\CommandHandler`
- **共享逻辑**: 提供子类共用的验证和处理逻辑
- **依赖注入**: 注入相关的应用服务和领域服务
- **验证方法**: 提供统一的验证方法
- **事务处理**: 统一事务管理逻辑

### 代码示例
```php
class ArticleCommandHandler extends CommandHandler
{
    public function __construct(
        public ArticleApplicationService $service,
        protected CategoryApplicationService $categoryService,
        protected ArticleTransformer $transformer
    ) {
    }

    protected function validate(ArticleData $command): void
    {
        $this->validateCategory($command);
        $this->validateTitle($command);
    }

    protected function validateCategory(ArticleData $command): void
    {
        if ($command->categoryId && !$this->categoryService->exists($command->categoryId)) {
            throw new ArticleException('分类不存在');
        }
    }
}
```
