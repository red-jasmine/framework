
# 文档规范和UML图标准

## 目录结构规范
```
docs/
├── {domain}/                    # 领域文档目录
│   ├── index.md                # 领域介绍文档（必需）
│   ├── storage.md              # 存储层设计文档（必需）
│   ├── {submodule}/            # 子模块文档目录
│   │   ├── index.md            # 子模块介绍（必需）
│   │   ├── model.puml          # 领域模型UML（必需）
│   │   ├── events.puml         # 领域事件UML（可选）
│   │   ├── sequence.puml       # 时序图UML（可选）
│   │   └── rules.md            # 核心规则说明（可选）
│   ├── *.puml                  # 领域级UML图（可选）
│   └── assets/                 # 静态资源目录（可选）
│       ├── images/             # 图片资源
│       └── diagrams/           # 图表资源
```

## 领域设计方案结构规范

### 1. 引言部分
- **背景介绍**: 描述该领域在业务中的背景和重要性
- **问题域**: 列出领域要解决的核心问题（4个问题）
- **业务价值**: 说明领域为业务带来的价值（4个价值）
- **项目目标**: 包含业务目标和技术目标
- **适用范围**: 明确文档的适用范围

### 2. 领域建模部分
- **领域分析**: 描述核心业务流程
- **核心能力**: 按功能分类描述（3个分类，每类3个能力）
- **领域参与角色**: 区分内部角色（4-6个）和外部角色（3-5个）
- **连接领域**: 区分上游领域和下游领域（各3-5个）
- **领域模型**: 使用PlantUML绘制聚合边界和实体关系
- **领域事件**: 描述核心事件和事件处理

### 3. 战略设计部分
- **子域划分**: 核心子域、支撑子域、通用子域
- **限界上下文**: 明确上下文边界和职责
- **上下文映射**: 描述上下文间的映射关系

### 4. 战术设计部分
- **聚合设计**: 详细描述每个聚合的边界、包含内容、一致性规则
- **实体设计**: 聚合根和实体的功能描述
- **值对象设计**: 值对象的功能描述
- **领域服务**: 领域服务的功能描述
- **业务规则设计**: 核心业务规则、验证规则、业务约束
- **仓库接口**: 持久化和检索接口
- **工厂模式**: 复杂对象创建逻辑
- **业务异常分类**: 验证、业务、系统、外部异常

### 5. 应用层设计部分
- **应用服务**: 功能描述和核心方法
- **命令设计**: 基础命令和业务命令
- **查询设计**: 基础查询和业务查询
- **命令处理器**: 基础处理器和业务处理器
- **查询处理器**: 基础处理器和业务处理器
- **转换器**: 数据映射职责

### 6. 基础设施层设计部分
- **仓库实现**: 写操作仓库和只读仓库
- **过滤器配置**: 允许的过滤器、排序、关联

### 7. 用户接口层设计部分
- **控制器**: 功能描述和核心接口
- **API资源**: 功能描述和核心字段
- **请求验证**: 验证规则和功能描述
- **路由定义**: API路由配置

### 8. 数据模型设计部分
- **核心数据表**: 表说明、核心字段、索引设计
- **数据关系图**: 使用PlantUML绘制ER图
- **数据迁移策略**: 版本管理、向后兼容、数据备份、回滚策略

### 9. 核心用例部分
- **用例格式**: 参与者、前置条件、主流程、后置条件
- **用例编号**: UC001、UC002、UC003格式
- **用例数量**: 控制在3-5个核心用例

### 10. 统一语言表部分
- **表格结构**: 英文名称、中文名称、说明、示例四列
- **术语数量**: 控制在30个以内核心术语
- **命名规范**: 英文名称使用PascalCase

### 11. 附录部分
- **术语表**: 术语、定义、说明
- **参考资料**: 相关书籍和文档
- **变更记录**: 版本、日期、变更内容、变更人

## 领域文档内容规范

### 概述部分规则
- **概述内容**: 必须包含领域的基本情况、主要职责、业务价值
- **问题域**: 列出领域要解决的核心问题
- **业务价值**: 说明领域为业务带来的价值
- **语言要求**: 使用清晰、准确的中文描述

### 核心能力描述规则
- **分类要求**: 按功能模块分类描述核心能力
- **描述格式**: 每个能力包含功能名称和具体说明
- **数量要求**: 核心能力数量控制在3-6个
- **重点突出**: 突出领域最核心、最重要的功能

### 领域参与角色规则
- **分类要求**: 必须区分内部角色和外部角色
- **角色描述**: 每个角色必须说明职责和权限
- **角色数量**: 内部角色控制在4-6个，外部角色控制在3-5个
- **命名规范**: 角色名称使用中文，职责描述清晰明确

### 连接领域规则
- **分类要求**: 必须区分上游领域和下游领域
- **依赖说明**: 说明与每个连接领域的依赖关系
- **接口描述**: 简要说明与连接领域的接口
- **数量控制**: 上下游领域各控制在3-5个

### 聚合设计规则
- **聚合根**: 明确指定聚合根实体
- **包含实体**: 列出聚合内包含的所有实体
- **包含值对象**: 列出聚合内包含的所有值对象
- **一致性边界**: 描述聚合内的一致性规则
- **业务规则**: 列出聚合内的核心业务规则

### 业务规则设计规则
- **核心业务规则**: 描述规则和实现方式
- **验证规则**: 输入验证和业务验证规则
- **业务约束**: 业务逻辑约束和限制条件

### 应用层设计规则
- **应用服务**: 功能描述和核心方法列表
- **命令设计**: 基础CRUD命令和业务命令
- **查询设计**: 基础查询和业务查询
- **处理器**: 命令处理器和查询处理器
- **转换器**: 数据映射和转换职责

### 核心用例规则
- **用例格式**: 使用标准用例格式，包含参与者、前置条件、主流程、后置条件
- **用例编号**: 使用UC001、UC002等格式编号
- **用例数量**: 核心用例控制在3-5个
- **流程描述**: 主流程使用步骤列表，步骤清晰明确

### 统一语言表规则
- **表格结构**: 必须包含英文名称、中文名称、说明、示例四列
- **术语数量**: 控制在30个以内核心术语
- **命名规范**: 英文名称使用PascalCase，中文名称简洁明了
- **示例要求**: 每个术语必须提供使用示例

## UML图规范

### 命名规范
- **类名**: 必须使用中文，如 `分销员`、`佣金`、`推广订单`
- **属性名**: 必须使用中文和英文描述，如 `佣金金额-CommissionAmount`
- **枚举值**: 必须使用中文和英文描述，如 `启用-ENABLE`

### 领域模型图规范
```puml
@startuml {领域名称}-domain-model

skinparam backgroundColor #FFFFFF
skinparam class {
    BackgroundColor #F8F9FA
    BorderColor #6C757D
    FontColor #212529
}

' 聚合边界
package "{聚合1}" {
    class {核心实体1} << Aggregate Root >> {
        +ID: string
        +名称: string
        +状态: {状态枚举}
        +创建时间: datetime
        +更新时间: datetime
        
        +创建方法()
        +更新方法()
        +状态变更方法()
        +业务方法1()
        +业务方法2()
    }
    
    class {值对象1} << Value Object >> {
        +属性1: string
        +属性2: int
        +验证方法()
        +计算方法()
    }
    
    class {值对象2} << Value Object >> {
        +属性1: string
        +属性2: decimal
        +验证方法()
    }
}

package "{聚合2}" {
    class {核心实体2} << Aggregate Root >> {
        +ID: string
        +关联实体1ID: string
        +属性1: string
        +属性2: decimal
        +状态: {状态枚举}
        +创建时间: datetime
        
        +创建方法()
        +更新方法()
        +业务方法1()
        +业务方法2()
    }
    
    class {值对象3} << Value Object >> {
        +属性1: string
        +属性2: int
        +验证方法()
    }
}

' 枚举定义
enum {状态枚举} {
    状态1-STATUS1
    状态2-STATUS2
    状态3-STATUS3
}

enum {类型枚举} {
    类型1-TYPE1
    类型2-TYPE2
    类型3-TYPE3
}

' 关系定义
{核心实体1} ||--|| {值对象1} : 包含
{核心实体1} ||--|| {值对象2} : 包含
{核心实体2} ||--|| {值对象3} : 包含
{核心实体1} ||--o{ {核心实体2} : 关联关系

' 领域事件
note right of {核心实体1} : 发布{事件1}
note right of {核心实体2} : 发布{事件2}

@enduml
```

### 时序图规范
```puml
@startuml {领域名称}-sequence

!theme plain
skinparam backgroundColor #FFFFFF

participant 用户 as U
participant {控制器} as C
participant {应用服务} as AS
participant {领域服务} as DS
participant {仓库} as R

U -> C: {业务请求}
C -> AS: 调用{业务方法}
AS -> DS: 执行{业务逻辑}
DS -> R: 查询{实体}
R -> DS: 返回{实体}
DS -> DS: 验证{业务规则}
DS -> R: 保存{实体}
R -> DS: 返回结果
DS -> AS: 返回处理结果
AS -> C: 返回响应
C -> U: 返回成功响应

@enduml
```

## 数据库设计文档

### 表结构文档
```markdown
## {实体名称}表 ({table_name})

### 表说明
{该表的主要用途}

### 字段说明
| 字段名 | 类型 | 长度 | 允许空 | 默认值 | 说明 |
|--------|------|------|--------|--------|------|
| id | bigint | 20 | NO | NULL | 主键，雪花ID |
| {字段1} | varchar | 255 | NO | NULL | {字段描述} |
| {字段2} | text | - | YES | NULL | {字段描述} |
| status | varchar | 50 | NO | {默认状态} | 状态字段 |
| created_at | timestamp | - | NO | CURRENT_TIMESTAMP | 创建时间 |
| updated_at | timestamp | - | NO | CURRENT_TIMESTAMP | 更新时间 |

### 索引说明
- PRIMARY KEY: id
- INDEX idx_{字段1}: {字段1}
- INDEX idx_status: status
- INDEX idx_created_at: created_at
```

### 数据关系图规范
```puml
@startuml {领域名称}-database-relation

!theme plain
entity {实体名称} {
    * id : bigint
    --
    * {字段1} : varchar(255)
    {字段2} : text
    * status : varchar(50)
    * created_at : timestamp
    * updated_at : timestamp
}

entity {关联实体} {
    * id : bigint
    --
    * {实体名称}_id : bigint
    * {字段1} : varchar(100)
    {字段2} : decimal(10,2)
}

entity {扩展表} {
    * id : bigint
    --
    * {实体名称}_id : bigint
    * {字段1} : varchar(100)
    {字段2} : text
    * created_at : timestamp
}

{实体名称} ||--o{ {关联实体} : 关联关系
{实体名称} ||--o{ {扩展表} : 扩展关系

@enduml
```

## 文档引用规范

### PlantUML图引用
```markdown
### 领域模型
<!--@include: ./model.puml-->

### 核心流程
<!--@include: ./sequence.puml-->
```

### 配置文件引用
```markdown
### 配置示例
<!--@include: ../config/{domain}.php-->
```

## 文档维护规范

### 更新频率
- 重要功能变更: 立即更新
- 小功能调整: 每周更新
- 文档优化: 每月检查

### 版本控制
- 文档版本与代码版本同步
- 重大变更需要版本说明
- 保留历史版本文档

### 质量检查
- 定期检查文档完整性
- 确保UML图与代码一致
- 验证DDD设计原则的遵循
- 检查聚合边界和一致性规则
- 确认业务规则的正确性

## DDD设计原则检查清单

### 战略设计检查
- [ ] 子域划分是否合理
- [ ] 限界上下文边界是否清晰
- [ ] 上下文映射关系是否正确
- [ ] 聚合边界是否明确

### 战术设计检查
- [ ] 聚合根选择是否合适
- [ ] 实体和值对象区分是否正确
- [ ] 业务规则是否完整
- [ ] 领域事件是否定义清晰
- [ ] 仓库接口是否合理

### 应用层设计检查
- [ ] 应用服务职责是否单一
- [ ] 命令和查询是否分离
- [ ] 处理器是否职责明确
- [ ] 转换器是否功能完整

### 基础设施层检查
- [ ] 仓库实现是否正确
- [ ] 过滤器配置是否合理
- [ ] 数据模型设计是否规范
- [ ] 索引设计是否优化

