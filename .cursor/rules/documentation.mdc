# 文档规范和UML图标准

## 目录结构规范
```
docs/
├── {domain}/                    # 领域文档目录
│   ├── index.md                # 领域介绍文档（必需）
│   ├── storage.md              # 存储层设计文档（必需）
│   ├── {submodule}/            # 子模块文档目录
│   │   ├── index.md            # 子模块介绍（必需）
│   │   ├── model.puml          # 领域模型UML（必需）
│   │   ├── events.puml         # 领域事件UML（可选）
│   │   ├── sequence.puml       # 时序图UML（可选）
│   │   └── rules.md            # 核心规则说明（可选）
│   ├── *.puml                  # 领域级UML图（可选）
│   └── assets/                 # 静态资源目录（可选）
│       ├── images/             # 图片资源
│       └── diagrams/           # 图表资源
```

### 必需配置项
- `title`: 文档标题，使用中文
- `description`: 文档描述，简要说明文档内容
- `outline`: 大纲深度，设置为 `deep`
- `order`: 文档排序，使用数字

### 可选配置项
- `lastUpdated`: 最后更新时间，设置为 `true`
- `tags`: 文档标签，用于分类
- `author`: 文档作者

## 领域文档内容规范

### 概述部分规则
- **概述内容**: 必须包含领域的基本情况、主要职责、业务价值
- **问题域**: 列出领域要解决的核心问题
- **业务价值**: 说明领域为业务带来的价值
- **语言要求**: 使用清晰、准确的中文描述

### 核心能力描述规则
- **分类要求**: 按功能模块分类描述核心能力
- **描述格式**: 每个能力包含功能名称和具体说明
- **数量要求**: 核心能力数量控制在3-6个
- **重点突出**: 突出领域最核心、最重要的功能

### 领域参与角色规则
- **分类要求**: 必须区分内部角色和外部角色
- **角色描述**: 每个角色必须说明职责和权限
- **角色数量**: 内部角色控制在4-6个，外部角色控制在3-5个
- **命名规范**: 角色名称使用中文，职责描述清晰明确

### 连接领域规则
- **分类要求**: 必须区分上游领域和下游领域
- **依赖说明**: 说明与每个连接领域的依赖关系
- **接口描述**: 简要说明与连接领域的接口
- **数量控制**: 上下游领域各控制在3-5个

### 核心用例规则
- **用例格式**: 使用标准用例格式，包含参与者、前置条件、主流程、后置条件
- **用例编号**: 使用UC001、UC002等格式编号
- **用例数量**: 核心用例控制在3-5个
- **流程描述**: 主流程使用步骤列表，步骤清晰明确

### 统一语言表规则
- **表格结构**: 必须包含英文名称、中文名称、说明、示例四列
- **术语数量**: 控制在30个以内核心术语
- **命名规范**: 英文名称使用PascalCase，中文名称简洁明了
- **示例要求**: 每个术语必须提供使用示例

## UML图规范

### 命名规范
- **类名**: 必须使用中文，如 `分销员`、`佣金`、`推广订单`
- **属性名**: 必须使用中文和英文描述，如 `佣金金额-CommissionAmount`
- **枚举值**: 必须使用中文和英文描述，如 `启用-ENABLE`

### 模型图规范
```puml
@startuml 领域模型图
!theme plain
skinparam backgroundColor #FFFFFF
skinparam class {
    BackgroundColor #F8F9FA
    BorderColor #DEE2E6
    ArrowColor #6C757D
}

class 文章 {
    - 编号: Long
    - 标题: String
    - 内容: String
    - 状态: ArticleStatus
    - 创建时间: DateTime
    --
    + 发布()
    + 撤回()
    + 更新内容(content: String)
}

enum ArticleStatus {
    草稿-DRAFT
    已发布-PUBLISHED
    已归档-ARCHIVED
}

文章 ||--o{ 文章标签 : 包含
文章 }o--|| 文章分类 : 属于
@enduml
```

### 时序图规范
```puml
@startuml 文章发布流程
!theme plain
skinparam backgroundColor #FFFFFF

participant 用户 as U
participant 文章控制器 as AC
participant 文章服务 as AS
participant 文章仓库 as AR

U -> AC: 发布文章请求
AC -> AS: 调用发布服务
AS -> AR: 查询文章
AR -> AS: 返回文章实体
AS -> AS: 验证发布条件
AS -> AR: 更新文章状态
AR -> AS: 返回更新结果
AS -> AC: 返回发布结果
AC -> U: 返回成功响应
@enduml
```

## 代码文档规范

### PHPDoc注释规范
```php
/**
 * 文章应用服务
 * 
 * 负责处理文章相关的业务逻辑，包括：
 * - 文章创建
 * - 文章更新
 * - 状态管理
 * 
 * @package RedJasmine\Article\Application\Services
 * @author 开发者姓名
 * @since 1.0.0
 */
class ArticleApplicationService extends ApplicationService
{
    /**
     * 发布文章
     * 
     * @param ArticlePublishCommand $command 发布命令
     * @return Article 发布后的文章实体
     * @throws ArticleException 当文章状态不允许发布时
     * @throws ValidationException 当验证失败时
     */
    public function publish(ArticlePublishCommand $command): Article
    {
        // 实现逻辑
    }
}
```

### 方法注释规范
- **简要描述**: 一句话说明方法的作用
- **详细描述**: 必要时提供更详细的说明
- **参数说明**: 使用@param标签说明每个参数
- **返回值说明**: 使用@return标签说明返回值类型和含义
- **异常说明**: 使用@throws标签说明可能抛出的异常

### 类注释规范
- **类职责**: 说明类的主要职责
- **核心功能**: 列出类的核心功能点
- **使用场景**: 说明类的使用场景
- **版本信息**: 使用@since标签说明版本

## 数据库设计文档

### 表结构文档
```markdown
## 文章表 (articles)

### 表说明
存储文章的基本信息，包括标题、内容、状态等核心字段。

### 字段说明
| 字段名 | 类型 | 长度 | 允许空 | 默认值 | 说明 |
|--------|------|------|--------|--------|------|
| id | bigint | 20 | NO | NULL | 主键，雪花ID |
| title | varchar | 255 | NO | NULL | 文章标题 |
| content | text | - | YES | NULL | 文章内容 |
| status | varchar | 50 | NO | draft | 文章状态 |
| created_at | timestamp | - | NO | CURRENT_TIMESTAMP | 创建时间 |
| updated_at | timestamp | - | NO | CURRENT_TIMESTAMP | 更新时间 |

### 索引说明
- PRIMARY KEY: id
- INDEX idx_status: status
- INDEX idx_created_at: created_at
```

### 关系图规范
使用PlantUML绘制ER图：
```puml
@startuml 数据库ER图
!theme plain
entity 文章 {
    * id : bigint
    --
    * title : varchar(255)
    content : text
    * status : varchar(50)
    * created_at : timestamp
    * updated_at : timestamp
}

entity 分类 {
    * id : bigint
    --
    * name : varchar(100)
    * slug : varchar(100)
}

文章 }o--|| 分类 : 属于
@enduml
```

## 文档引用规范

### PlantUML图引用
```markdown
### 领域模型
<!--@include: ./model.puml-->

### 核心流程
<!--@include: ./sequence.puml-->
```

### 配置文件引用
```markdown
### 配置示例
<!--@include: ../config/article.php-->
```

## 文档维护规范

### 更新频率
- 重要功能变更: 立即更新
- 小功能调整: 每周更新
- 文档优化: 每月检查

### 版本控制
- 文档版本与代码版本同步
- 重大变更需要版本说明
- 保留历史版本文档

### 质量检查
- 定期检查文档完整性
- 验证代码示例的正确性
- 确保UML图与代码一致

- 验证代码示例的正确性
- 确保UML图与代码一致
