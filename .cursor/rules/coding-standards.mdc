
# PHP和Laravel代码规范

## 核心原则
- 使用准确的PHP/Laravel语法
- 优先考虑面向对象编程和干净架构的SOLID原则
- 遵循PHP和Laravel的最佳实践，确保一致性和可读性
- 设计可扩展性和可维护性，确保系统能够轻松增长
- 比起重复，更喜欢迭代和模块化，以促进代码重用
- 为变量、方法和类使用一致和描述性的名称，以提高可读性

## 技术栈要求
- PHP 8.4+
- Laravel 12.0+
- 遵循PSR-12编码标准

## PHP 8.4+ 特性使用
- 利用类型化属性、匹配表达式
- 使用联合类型和交集类型
- 使用属性(Attributes)替代注释
- 使用构造函数属性提升
- 使用命名参数增强可读性

### 代码示例
```php
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class Article extends Model
{
    // 使用PHP 8.4+ 类型化属性
    public string $title;
    public ?string $content = null;
    public ArticleStatus $status;
    
    // 使用构造函数属性提升
    public function __construct(
        public readonly int $id,
        public string $title,
        public ArticleStatus $status = ArticleStatus::DRAFT
    ) {
        parent::__construct();
    }
    
    // 使用联合类型
    public function getAuthor(): User|Admin|null
    {
        return $this->author;
    }
    
    // 使用匹配表达式
    public function getStatusColor(): string
    {
        return match($this->status) {
            ArticleStatus::DRAFT => 'gray',
            ArticleStatus::PUBLISHED => 'green',
            ArticleStatus::ARCHIVED => 'yellow',
        };
    }
}
```

## Laravel最佳实践

### 模型设计
- 模型应该是最终类，以确保数据完整性并防止继承的意外行为
- 使用强类型声明和返回类型
- 使用Eloquent ORM而非原始SQL查询
- 实现适当的关联关系

### 控制器设计
- 控制器应该是最终类，以防止继承
- 使控制器为只读（即没有属性突变）
- 避免将依赖项直接注入控制器。相反，使用方法注入或服务类
- 保持控制器轻量，业务逻辑应在服务层

### 路由设计
- 保持一致和有组织的路由
- 为每个主要模型或要素区域创建单独的路由文件
- 将相关路由分组在一起
- 使用路由模型绑定

### 代码示例
```php
// 路由定义
Route::group(['prefix' => 'api/v1'], function () {
    Route::apiResource('articles', ArticleController::class);
    Route::patch('articles/{article}/publish', [ArticleController::class, 'publish']);
});

// 控制器
final class ArticleController extends Controller
{
    public function __construct(
        private readonly ArticleService $articleService
    ) {}
    
    public function index(Request $request): JsonResponse
    {
        $articles = $this->articleService->paginate($request->validated());
        return response()->json($articles);
    }
    
    public function publish(Article $article): JsonResponse
    {
        $this->articleService->publish($article);
        return response()->json(['message' => 'Article published successfully']);
    }
}
```

## 命名规范

### 类命名
- 使用PascalCase
- 类名应该是名词，描述其职责
- 避免使用缩写，除非是众所周知的

### 方法命名
- 使用camelCase
- 方法名应该是动词，描述其行为
- 布尔方法使用is、has、can等前缀

### 变量命名
- 使用camelCase
- 变量名应该是描述性的
- 避免使用单字符变量名（除了循环计数器）

### 常量命名
- 使用UPPER_SNAKE_CASE
- 常量名应该描述其用途

### 数据库命名
- 表名使用复数形式的snake_case
- 字段名使用snake_case
- 外键使用`{model}_id`格式

## 类型声明和错误处理

### 方法类型声明
```php
// 始终使用返回类型声明
public function getArticleById(int $id): ?Article
{
    return Article::find($id);
}

// 使用参数类型提示
public function updateArticle(Article $article, array $data): Article
{
    $article->update($data);
    return $article;
}

// 使用联合类型
public function processContent(string|array $content): string
{
    if (is_array($content)) {
        return implode(' ', $content);
    }
    return $content;
}
```

### 异常处理
```php
try {
    $article = $this->articleService->create($data);
} catch (ValidationException $e) {
    return response()->json(['errors' => $e->errors()], 422);
} catch (Exception $e) {
    Log::error('Article creation failed', ['error' => $e->getMessage()]);
    return response()->json(['message' => 'Internal server error'], 500);
}
```

### 自定义异常
```php
class ArticleNotFoundException extends Exception
{
    public function __construct(int $id)
    {
        parent::__construct("Article with ID {$id} not found");
    }
}
```

## 数据验证

### 使用Form Request
```php
class CreateArticleRequest extends FormRequest
{
    public function rules(): array
    {
        return [
            'title' => ['required', 'string', 'max:255'],
            'content' => ['required', 'string'],
            'category_id' => ['nullable', 'exists:categories,id'],
            'tags' => ['array'],
            'tags.*' => ['string', 'max:50'],
        ];
    }
    
    public function messages(): array
    {
        return [
            'title.required' => '标题不能为空',
            'content.required' => '内容不能为空',
        ];
    }
}
```

## 数据库操作

### 使用Eloquent ORM
```php
// 好的做法
$articles = Article::with('category', 'tags')
    ->where('status', ArticleStatus::PUBLISHED)
    ->orderBy('created_at', 'desc')
    ->paginate(15);

// 避免N+1查询
$articles = Article::with(['category', 'author', 'tags'])->get();
```

### 使用数据库事务
```php
DB::transaction(function () {
    $article = Article::create($data);
    $article->tags()->attach($tagIds);
    $article->updateSearchIndex();
});
```

## 性能优化

### 查询优化
- 使用eager loading避免N+1查询
- 使用索引优化查询性能
- 使用查询构建器进行复杂查询

### 缓存使用
```php
// 使用缓存
$articles = Cache::remember('articles.popular', 3600, function () {
    return Article::with('category')
        ->where('view_count', '>', 1000)
        ->orderBy('view_count', 'desc')
        ->get();
});
```

## 安全实践

### 输入验证
- 始终验证用户输入
- 使用Laravel的验证规则
- 防止SQL注入，使用参数化查询

### 权限控制
```php
// 使用Policy
class ArticlePolicy
{
    public function update(User $user, Article $article): bool
    {
        return $user->id === $article->user_id;
    }
}

// 在控制器中使用
$this->authorize('update', $article);
```

### CSRF保护
- 在表单中使用@csrf令牌
- 验证CSRF令牌

- 在表单中使用@csrf令牌
- 验证CSRF令牌
