---
description: 
globs: 
alwaysApply: true
---
# Red Jasmine Framework 项目规则说明书

## 项目概述

Red Jasmine Framework 是一个基于 Laravel 12.0+ 和 PHP 8.3+ 的现代化电商框架，采用领域驱动设计（DDD）架构，通过模块化的方式构建可扩展的电商系统。



## 目录结构

### 整体架构
```
framework/
├── packages/                   # 领域包目录
│   ├── support/                # 公共支持包
│   ├── *                       # 各个业务领域包
│   ├── admin/                  # 管理后台领域
│   └── filament-*/             # Filament管理面板相关包
├── docs/                       # 文档目录
├── tests/                      # 测试目录
├── workbench/                  # 开发工作台
└── vendor/                     # Composer依赖
```

### 领域包结构
每个领域包都遵循统一的目录结构：

```
packages/{domain}/
├── src/                        # 源代码
│   ├── Domain/                 # 领域层
│   │   ├── Models/             # 领域模型
│   │   │   ├── Enums/          # 枚举定义
│   │   │   └── ValueObjects/   # 值对象
│   │   ├── Repositories/       # 仓库接口
│   │   ├── Data/               # 基础DTO
│   │   ├── Transformers/       # 转换器
│   │   ├── Events/             # 领域事件
│   │   ├── Services/           # 领域服务
│   │   ├── Contracts/          # 领域契约
│   │   └── Facades/            # 门面类
│   ├── Application/            # 应用层
│   │   └── Services/           # 应用服务
│   │       ├── Commands/       # 命令定义和 命令处理器
│   │       └── Queries/        # 查询定义和 查询处理器
│   ├── Infrastructure/         # 基础设施层
│   │   ├── Repositories/       # 仓库实现
│   │   │   └── Eloquent/       # Eloquent实现
│   │   └── ReadRepositories/   # 只读仓库实现
│   │       └── Mysql/          # MySQL实现
│   ├── UI/                     # 用户接口层
│   │   └── Http/               # HTTP接口
│   │       ├── Admin/          # 管理员接口 （按需）
│   │       ├── User/           # 用户接口 （按需）
│   │       └── Shop/           # 商家接口（按需）
│   └── Exceptions/             # 异常处理
├── config/                     # 配置文件
├── database/                   # 数据库相关
│   └── migrations/             # 数据库迁移
├── routes/                     # 路由定义
├── resources/                  # 资源文件
│   ├── lang/                   # 语言文件
│   └── views/                  # 视图文件
├── composer.json               # 包配置
└── README.md                   # 包说明
```

## 公共代码规范

### Support 包核心组件

#### 1. 应用服务基类 (ApplicationService)
##### 规范
- **基类功能**：提供标准的CRUD操作，支持宏扩展和Hook机制
- **Trait组合**：使用 `HasHooks` 和 `Macroable` Trait
- **静态配置**：定义 `$handlers` 数组配置默认处理器
- **方法调用**：通过 `__call` 魔术方法实现动态方法调用
- **依赖注入**：支持处理器的依赖注入
- **Hook集成**：内置钩子机制，支持扩展点管理

##### 代码示例
```php
<?php

namespace RedJasmine\Support\Application;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Traits\Macroable;
use RedJasmine\Support\Application\Commands\CreateCommandHandler;
use RedJasmine\Support\Foundation\Hook\HasHooks;

/**
 * 应用服务基类
 * 
 * @method Model create(Data $command)
 * @method Model update(Data $command)
 * @method bool delete(Data $command)
 * @method Model find(FindQuery $query)
 * @method LengthAwarePaginator|Paginator paginate(PaginateQuery $query)
 */
class ApplicationService
{
    use HasHooks;
    use Macroable {
        Macroable::__call as macroCall;
    }

    protected static array $handlers = [
        'create'   => CreateCommandHandler::class,
        'update'   => UpdateCommandHandler::class,
        'delete'   => DeleteCommandHandler::class,
        'find'     => FindQueryHandler::class,
        'paginate' => PaginateQueryHandler::class
    ];

    protected static array $macros = [];
    protected static string $modelClass = Model::class;

    public function __call($method, $parameters)
    {
        if (!isset(static::getMacros()[$method])) {
            throw new BadMethodCallException(sprintf(
                'Method %s::%s does not exist.', static::class, $method
            ));
        }

        $macro = static::getMacros()[$method];
        $macro = $this->makeHandler($macro);
        
        if (method_exists($macro, 'handle')) {
            return $this->callHandler($macro, $method, $parameters);
        }
        
        return $macro(...$parameters);
    }

    public function callHandler($macro, $method, $parameters): mixed
    {
        return $this->hook(
            $method,
            count($parameters) === 1 ? $parameters[0] : $parameters,
            fn() => $macro->handle(...$parameters)
        );
    }

    protected function makeHandler($macro)
    {
        if (is_string($macro) && class_exists($macro)) {
            return app($macro, ['service' => $this]);
        }
        return $macro;
    }
}
```

#### 2. 命令处理器基类 (CommandHandler)
##### 规范
- **基类功能**：提供命令处理的基础功能
- **事务支持**：使用 `CanUseDatabaseTransactions` Trait
- **钩子机制**：使用 `HasHooks` Trait 支持扩展点
- **上下文管理**：使用 `HandleContext` 管理处理上下文
- **验证和填充**：提供 `validate()` 和 `fill()` 扩展点

##### 代码示例
```php
<?php

namespace RedJasmine\Support\Application\Commands;

use RedJasmine\Support\Foundation\Hook\HasHooks;
use RedJasmine\Support\Foundation\Service\CanUseDatabaseTransactions;

abstract class CommandHandler
{
    use HasHooks;
    use CanUseDatabaseTransactions;

    protected HandleContext $context;

    public function __construct(protected ApplicationService $service)
    {
        $this->context = new HandleContext();
    }

    public function handle(Data $command): ?Model
    {
        $this->context->setCommand($command);
        $this->context->setModel($this->newModel($command));
        
        $this->beginDatabaseTransaction();
        try {
            $this->service->hook('create.validate', $this->context, fn() => $this->validate($this->context));
            $this->service->hook('create.fill', $this->context, fn() => $this->fill($this->context));
            
            $this->service->repository->store($this->context->getModel());
            $this->commitDatabaseTransaction();
        } catch (Throwable $throwable) {
            $this->rollBackDatabaseTransaction();
            throw $throwable;
        }

        return $this->context->model;
    }

    protected function validate(HandleContext $context): void
    {
        // 子类实现具体验证逻辑
    }

    protected function fill(HandleContext $context): Model
    {
        if (property_exists($this->service, 'transformer')) {
            if ($this->service->transformer instanceof TransformerInterface) {
                $context->setModel($this->service->transformer->transform($context->getCommand(), $context->getModel()));
            }
        } else {
            $context->getModel()->fill($context->getCommand()->all());
        }

        if ($context->model instanceof OwnerInterface && property_exists($context->getCommand(), 'owner')) {
            $context->model->owner = $context->getCommand()->owner;
        }
        
        return $context->getModel();
    }
}
```

#### 3. 仓库接口规范
##### 写操作仓库接口
```php
<?php

namespace RedJasmine\Support\Domain\Repositories;

use Illuminate\Database\Eloquent\Model;

/**
 * 仓储接口，提供标准的数据操作方法
 * 主要用于抽象数据访问层，支持不同的数据存储机制
 */
interface RepositoryInterface
{
    /**
     * 查找指定ID的记录
     */
    public function find($id);

    /**
     * 存储模型实例到数据库
     */
    public function store(Model $model);

    /**
     * 更新模型实例的数据
     */
    public function update(Model $model);

    /**
     * 从数据库中删除模型实例
     */
    public function delete(Model $model);
}
```

##### 只读仓库接口
```php
<?php

namespace RedJasmine\Support\Domain\Repositories;

use Closure;
use Illuminate\Contracts\Database\Eloquent\Builder;
use Illuminate\Contracts\Pagination\Paginator;
use Illuminate\Pagination\LengthAwarePaginator;

/**
 * 读取仓库接口，定义数据读取的相关规范
 * 提供模型查询能力，支持排序、字段选择、分页、关联数据等
 */
interface ReadRepositoryInterface
{
    /**
     * 获取模型查询构建器
     */
    public function modelQuery(?Query $query = null): Builder;

    /**
     * 添加查询回调函数
     */
    public function withQuery(Closure $queryCallback): static;

    /**
     * 通过ID查找记录
     */
    public function find(FindQuery $query): ?Model;

    /**
     * 分页查询实体列表
     */
    public function paginate(PaginateQuery $query): LengthAwarePaginator|Paginator;
}
```

#### 4. 仓库实现基类
##### Eloquent仓库实现
```php
<?php

namespace RedJasmine\Support\Infrastructure\Repositories\Eloquent;

use Illuminate\Database\Eloquent\Model;
use RedJasmine\Support\Domain\Repositories\RepositoryInterface;

/**
 * Eloquent仓库基础实现
 * @template TClass of Model
 */
class EloquentRepository implements RepositoryInterface
{
    /**
     * @var class-string<TClass>
     */
    protected static string $eloquentModelClass = Model::class;

    public function find($id)
    {
        return static::$eloquentModelClass::findOrFail($id);
    }

    public function store(Model $model): Model
    {
        $model->push();
        return $model;
    }

    public function update(Model $model): void
    {
        $model->push();
    }

    public function delete(Model $model)
    {
        $model->delete();
    }
}
```

##### 只读仓库实现
```php
<?php

namespace RedJasmine\Support\Infrastructure\ReadRepositories;

use RedJasmine\Support\Domain\Repositories\ReadRepositoryInterface;
use Spatie\QueryBuilder\QueryBuilder;

/**
 * 基于QueryBuilder的只读仓库实现
 * 集成Spatie QueryBuilder，支持过滤、排序、字段选择、关联包含
 */
abstract class QueryBuilderReadRepository implements ReadRepositoryInterface
{
    protected ?array $allowedFilters = null;
    protected ?array $allowedIncludes = null;
    protected ?array $allowedFields = null;
    protected ?array $allowedSorts = null;
    protected array $queryCallbacks = [];
    protected mixed $defaultSort = '-id';

    public function withQuery(Closure $queryCallback): static
    {
        $this->queryCallbacks[] = $queryCallback;
        return $this;
    }

    public function query(?Query $query = null): QueryBuilder
    {
        $queryBuilder = QueryBuilder::for($this->modelQuery($query), $this->buildRequest($query));

        // 配置允许的过滤器、字段、包含关系和排序字段
        if (method_exists($this, 'allowedFilters') && $allowedFilters = $this->allowedFilters($query)) {
            $queryBuilder->allowedFilters($allowedFilters);
        }
        if (method_exists($this, 'allowedIncludes') && $allowedIncludes = $this->allowedIncludes($query)) {
            $queryBuilder->allowedIncludes($allowedIncludes);
        }
        if (method_exists($this, 'allowedSorts') && $allowedSorts = $this->allowedSorts($query)) {
            $queryBuilder->allowedSorts($allowedSorts);
        }

        // 执行查询回调
        $this->queryCallbacks($queryBuilder);

        return $queryBuilder;
    }

    public function paginate(PaginateQuery $query): LengthAwarePaginator|Paginator
    {
        $queryBuilder = $this->query($query)->defaultSort($this->defaultSort);
        return $query->isWithCount() ? $queryBuilder->paginate($query->perPage) : $queryBuilder->simplePaginate($query->perPage);
    }
}
```

#### 5. 数据传输对象基类 (Data)
##### 规范
- **基类继承**：继承 `Spatie\LaravelData\Data`
- **映射配置**：使用 `SnakeCaseMapper` 进行命名映射
- **主键管理**：提供主键相关的方法
- **管道支持**：支持数据管道处理
- **用户接口转换**：集成用户接口转换管道

##### 代码示例
```php
<?php

namespace RedJasmine\Support\Data;

use Spatie\LaravelData\Attributes\MapInputName;
use Spatie\LaravelData\Attributes\MapOutputName;
use Spatie\LaravelData\Mappers\SnakeCaseMapper;

#[MapInputName(SnakeCaseMapper::class)]
#[MapOutputName(SnakeCaseMapper::class)]
class Data extends \Spatie\LaravelData\Data
{
    protected string $primaryKey = 'id';

    public function getPrimaryKey(): string
    {
        return $this->primaryKey;
    }

    public function getKey()
    {
        return $this->{$this->primaryKey} ?? null;
    }

    public function setKey($key): void
    {
        $this->{$this->primaryKey} = $key;
    }

    public static function pipeline(): DataPipeline
    {
        $pipeline = parent::pipeline();
        $pipeline->firstThrough(UserInterfacePipeline::class);
        return $pipeline;
    }
}
```

#### 6. 钩子机制 (HasHooks)
##### 规范
- **Trait特性**：提供钩子功能的可复用特性
- **前缀配置**：支持钩子名称前缀配置
- **Hook注册**：支持静态和动态Hook注册
- **管道执行**：通过Hook Facade执行钩子管道

##### 代码示例
```php
<?php

namespace RedJasmine\Support\Foundation\Hook;

use Closure;
use RedJasmine\Support\Facades\Hook;

/**
 * 钩子能力Trait
 */
trait HasHooks
{
    /**
     * 钩子前缀
     */
    public static string $hookNamePrefix;

    /**
     * 执行钩子操作
     */
    public function hook(string $hook, mixed $passable, Closure $destination): mixed
    {
        $this->registerDefaultHooks();
        return Hook::hook(
            $this->getHookName($hook),
            $passable,
            $destination
        );
    }

    protected function registerDefaultHooks(): void
    {
        foreach ($this->hooks() as $hook => $pipelines) {
            static::registerHook($hook, $pipelines);
        }
    }

    protected function hooks(): array
    {
        return [];
    }

    public static function registerHook(string $hook, mixed $pipeline): void
    {
        if (static::getHookName($hook)) {
            Hook::register(static::getHookName($hook), $pipeline);
        }
    }

    public static function getHookName(string $hook): string
    {
        $prefix = static::class;
        if (method_exists(static::class, 'hookNamePrefix')) {
            $prefix = (string) static::hookNamePrefix();
        } elseif (isset(static::$hookNamePrefix)) {
            $prefix = static::$hookNamePrefix;
        }
        return $prefix.'.'.$hook;
    }
}
```

#### 7. 领域模型Trait组件
##### HasSnowflakeId Trait
```php
<?php

namespace RedJasmine\Support\Domain\Models\Traits;

use RedJasmine\Support\Helpers\ID\Snowflake;

/**
 * 雪花ID生成器Trait
 * @property-read bool $uniqueShortId
 */
trait HasSnowflakeId
{
    public function initializeHasSnowflakeId(): void
    {
        $this->usesUniqueIds = true;
    }

    public function uniqueIds(): array
    {
        return [$this->getKeyName()];
    }

    public function newUniqueId(): int
    {
        $hasUniqueShortId = property_exists($this, 'uniqueShortId') && (bool) $this->uniqueShortId;
        return $hasUniqueShortId ? Snowflake::shortId() : Snowflake::buildId();
    }

    public function getIncrementing(): bool
    {
        return false;
    }
}
```

##### HasOwner Trait
```php
<?php

namespace RedJasmine\Support\Domain\Models\Traits;

use Illuminate\Database\Eloquent\Casts\Attribute;
use RedJasmine\Support\Contracts\UserInterface;
use RedJasmine\Support\Data\UserData;

/**
 * 所有者管理Trait
 * @property string $owner_type
 * @property int $owner_id
 */
trait HasOwner
{
    public function owner(): Attribute
    {
        return Attribute::make(
            get: fn() => UserData::from([
                'type' => $this->{$this->getOwnerKey('type')},
                'id' => $this->{$this->getOwnerKey('id')},
                'nickname' => $this->withOwnerNickname() ? ($this->{$this->getOwnerKey('nickname')} ?? null) : null,
                'avatar' => $this->withOwnerAvatar() ? ($this->{$this->getOwnerKey('avatar')} ?? null) : null,
            ]),
            set: fn(?UserInterface $user = null) => array_merge([
                $this->getOwnerKey('type') => $user?->getType(),
                $this->getOwnerKey('id') => $user?->getID(),
            ], $this->withOwnerNickname() ? [
                $this->getOwnerKey('nickname') => $user?->getNickname(),
            ] : [], $this->withOwnerAvatar() ? [
                $this->getOwnerKey('avatar') => $user?->getAvatar(),
            ] : [])
        );
    }

    public function scopeOnlyOwner(Builder $query, ?UserInterface $owner = null): Builder
    {
        if ($owner) {
            return $query->where($this->getOwnerColumn().'_type', $owner->getType())
                        ->where($this->getOwnerColumn().'_id', $owner->getID());
        }
        return $query;
    }

    protected function getOwnerKey(string $key): string
    {
        return $this->getOwnerColumn().'_'.$key;
    }
}
```

#### 8. 控制器动作Trait (RestControllerActions)
##### 规范
- **组合模式**：组合查询和命令动作Trait
- **RESTful设计**：提供标准的RESTful API方法
- **权限验证**：集成权限验证机制
- **资源转换**：支持API资源转换
- **静态配置**：通过静态属性配置资源类和数据类

##### 代码示例
```php
<?php

namespace RedJasmine\Support\UI\Http\Controllers;

trait RestControllerActions
{
    use RestQueryControllerActions;
    use RestCommandControllerActions;
}

/**
 * RESTful命令控制器动作
 * @property ApplicationService $service
 * @property string $resourceClass
 * @property string $modelClass
 * @property string $dataClass
 */
trait RestCommandControllerActions
{
    public function store(Request $request): JsonResource
    {
        if ($request instanceof FormRequest) {
            $request->validated();
        }
        if (method_exists($this, 'authorize')) {
            $this->authorize('create', static::$modelClass);
        }

        $request->offsetSet($this->getOwnerKey(), $this->getOwner());
        $dataClass = static::$createCommandClass ?? static::$dataClass;
        $command = $dataClass::from($request);

        $result = $this->service->create($command);
        return new static::$resourceClass($result);
    }

    public function update($id, Request $request): JsonResource
    {
        if ($request instanceof FormRequest) {
            $request->validated();
        }
        $model = $this->service->find(FindQuery::from(['id' => $id]));

        if (method_exists($this, 'authorize')) {
            $this->authorize('update', $model);
        }
        
        $request->offsetSet($this->getOwnerKey(), $this->getOwner());
        $dataClass = static::$updateCommandClass ?? static::$dataClass;
        $command = $dataClass::from($request);
        $command->setKey($id);
        
        $result = $this->service->update($command);
        return new (static::$resourceClass)($result);
    }

    public function destroy($id)
    {
        $model = $this->service->find(FindQuery::from(['id' => $id]));
        if (method_exists($this, 'authorize')) {
            $this->authorize('delete', $model);
        }
        
        $command = new Data();
        $command->setKey($id);
        $this->service->delete($command);
        
        return static::success();
    }
}
```

#### 9. 值对象基类 (ValueObject)
##### 规范
- **基类继承**：继承 `RedJasmine\Support\Domain\Models\ValueObjects\ValueObject`
- **不可变性**：值对象应该是不可变的
- **业务表达**：表达特定的业务概念
- **类型安全**：使用强类型声明

##### 代码示例
```php
<?php

namespace RedJasmine\Support\Domain\Models\ValueObjects;

/**
 * 值对象基类
 * 所有值对象都应该继承此基类
 */
class ValueObject
{
    // 基础值对象功能
}
```

#### 10. 处理上下文 (HandleContext)
##### 规范
- **上下文管理**：管理命令处理过程中的上下文信息
- **命令存储**：存储和管理命令对象
- **模型管理**：存储和管理领域模型对象
- **链式调用**：支持链式方法调用
- **类型安全**：使用强类型声明

##### 代码示例
```php
<?php

namespace RedJasmine\Support\Application;

use Illuminate\Database\Eloquent\Model;
use RedJasmine\Support\Data\Data;

/**
 * 处理上下文类
 * 用于在命令处理过程中管理上下文信息
 */
class HandleContext
{
    /**
     * 命令对象
     */
    protected Data $command;

    /**
     * 领域模型
     */
    public Model $model;

    public function getCommand(): Data
    {
        return $this->command;
    }

    public function setCommand(Data $command): HandleContext
    {
        $this->command = $command;
        return $this;
    }

    public function setModel(Model $model): HandleContext
    {
        $this->model = $model;
        return $this;
    }

    public function getModel(): Model
    {
        return $this->model;
    }
}
```

#### 11. 宏扩展机制 (MacroAble)
##### 规范
- **动态扩展**：支持运行时动态添加方法
- **静态宏**：支持静态宏方法注册
- **实例宏**：支持实例宏方法注册
- **混入支持**：支持将其他对象的方法混入到当前类
- **反射机制**：使用反射获取方法信息

##### 代码示例
```php
<?php

namespace RedJasmine\Support\Application;

use Closure;
use ReflectionMethod;

/**
 * 宏扩展机制Trait
 * 提供动态方法扩展能力
 */
trait MacroAble
{
    /**
     * 注册的宏方法
     */
    protected static array $macros = [];

    /**
     * 注册自定义宏方法
     */
    public static function macro(string $name, callable|object $macro): void
    {
        static::$macros[$name] = $macro;
    }

    /**
     * 混入其他对象的方法
     */
    public static function mixin(object $mixin, $replace = true)
    {
        $methods = (new \ReflectionClass($mixin))->getMethods(
            ReflectionMethod::IS_PUBLIC | ReflectionMethod::IS_PROTECTED
        );

        foreach ($methods as $method) {
            if ($replace || !static::hasMacro($method->name)) {
                static::macro($method->name, $method->invoke($mixin));
            }
        }
    }

    /**
     * 检查宏方法是否已注册
     */
    public static function hasMacro(string $name): bool
    {
        return isset(static::$macros[$name]);
    }

    /**
     * 清除所有宏方法
     */
    public static function flushMacros(): void
    {
        static::$macros = [];
    }

    /**
     * 动态调用宏方法
     */
    public function __call($method, $parameters)
    {
        if (!static::hasMacro($method)) {
            throw new \BadMethodCallException(sprintf(
                'Method %s::%s does not exist.', static::class, $method
            ));
        }

        $macro = static::$macros[$method];

        if ($macro instanceof Closure) {
            $macro = $macro->bindTo($this, static::class);
        }

        return $macro(...$parameters);
    }
}
```

#### 12. 枚举助手 (EnumsHelper)
##### 规范
- **标签支持**：提供 `labels()` 方法返回枚举标签映射
- **颜色支持**：提供 `colors()` 方法返回枚举颜色映射
- **图标支持**：提供 `icons()` 方法返回枚举图标映射
- **选项生成**：提供 `options()` 方法生成选项数组
- **国际化支持**：集成Laravel的国际化功能

##### 代码示例
```php
<?php

namespace RedJasmine\Support\Helpers\Enums;

/**
 * 枚举助手Trait
 * 为枚举类提供通用功能
 */
trait EnumsHelper
{
    /**
     * 获取枚举标签映射
     */
    public static function labels(): array
    {
        return [];
    }

    /**
     * 获取枚举颜色映射
     */
    public static function colors(): array
    {
        return [];
    }

    /**
     * 获取枚举图标映射
     */
    public static function icons(): array
    {
        return [];
    }

    /**
     * 获取选项数组
     */
    public static function options(): array
    {
        $labels = static::labels();
        $options = [];
        
        foreach (static::cases() as $case) {
            $options[] = [
                'value' => $case->value,
                'label' => $labels[$case->value] ?? $case->value,
                'color' => static::colors()[$case->value] ?? null,
                'icon' => static::icons()[$case->value] ?? null,
            ];
        }
        
        return $options;
    }

    /**
     * 获取枚举标签
     */
    public function getLabel(): string
    {
        return static::labels()[$this->value] ?? $this->value;
    }

    /**
     * 获取枚举颜色
     */
    public function getColor(): ?string
    {
        return static::colors()[$this->value] ?? null;
    }

    /**
     * 获取枚举图标
     */
    public function getIcon(): ?string
    {
        return static::icons()[$this->value] ?? null;
    }
}
```

#### 13. 用户接口管道 (UserInterfacePipeline)
##### 规范
- **数据管道**：实现数据传输对象的处理管道
- **用户接口转换**：专门处理UserInterface类型的转换
- **属性检测**：自动检测包含UserInterface的属性
- **类型安全**：确保类型转换的安全性

##### 代码示例
```php
<?php

namespace RedJasmine\Support\Data;

use Spatie\LaravelData\DataPipeline;
use RedJasmine\Support\Contracts\UserInterface;

/**
 * 用户接口数据管道
 * 专门处理UserInterface类型的数据转换
 */
class UserInterfacePipeline
{
    public function handle($data, $next)
    {
        // 处理用户接口类型转换
        if (is_array($data)) {
            foreach ($data as $key => $value) {
                if ($this->isUserInterfaceProperty($key, $value)) {
                    $data[$key] = $this->transformUserInterface($value);
                }
            }
        }

        return $next($data);
    }

    protected function isUserInterfaceProperty(string $key, $value): bool
    {
        return str_contains($key, 'owner') || str_contains($key, 'operator') || str_contains($key, 'user');
    }

    protected function transformUserInterface($value): ?UserInterface
    {
        if ($value instanceof UserInterface) {
            return $value;
        }

        if (is_array($value) && isset($value['type'], $value['id'])) {
            return new UserData($value);
        }

        return null;
    }
}
```

## DDD 代码规范

### 领域层 (Domain)

#### 领域模型
#####  规范
- **领域模型**：领域模型采用充血模型策略
- **业务封装**：业务逻辑封装在模型内部
- **逻辑复用**：使用 Trait 复用通用功能
- **事件处理**：支持领域事件分发
- **接口实现**：实现相关接口规范
- **ID生成**：通常雪花ID作为主键，可通过 HasSnowflakeId Trait，设置 public $incrementing = false;
- **所属者信息管理**：支持所属者信息管理
- **审批功能**：有审批需求时才添加审批功能
- **复杂关联**：在 boot 方法中处理复杂的多对多关联同步
- **实例初始化**：重写 newInstance 方法进行模型初始化
- **生命周期钩子**：使用 saving、deleting、restoring 等钩子处理业务逻辑

##### 代码示例
```php
<?php

namespace RedJasmine\Product\Domain\Product\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\SoftDeletes;
use RedJasmine\Product\Domain\Product\Models\Enums\ProductStatusEnum;
use RedJasmine\Product\Domain\Product\Models\Extensions\ProductExtension;
use RedJasmine\Support\Domain\Models\OperatorInterface;
use RedJasmine\Support\Domain\Models\OwnerInterface;
use RedJasmine\Support\Domain\Models\Traits\HasSnowflakeId;
use RedJasmine\Support\Domain\Models\Traits\HasOwner;
use RedJasmine\Support\Domain\Models\Traits\HasOperator;

class Product extends Model implements OperatorInterface, OwnerInterface
{
    use HasSnowflakeId;
    use HasOwner;
    use HasOperator;
    use SoftDeletes;

    public $incrementing = false;

    /**
     * 类型转换配置
     */
    protected function casts(): array
    {
        return [
            'product_type' => ProductTypeEnum::class,
            'status' => ProductStatusEnum::class,
            'is_multiple_spec' => 'boolean',
            'is_brand_new' => 'boolean',
            'price' => MoneyCast::class,
            'market_price' => MoneyCast::class,
            'on_sale_time' => 'datetime',
            'modified_time' => 'datetime',
        ];
    }

    /**
     * 模型生命周期钩子
     */
    protected static function boot(): void
    {
        parent::boot();

        // 保存时处理关联关系
        static::saving(callback: static function (Product $product) {
            // 处理扩展产品分组关联
            if ($product->relationLoaded('extendProductGroups')) {
                if ($product->extendProductGroups?->count() > 0) {
                    if (!is_array($product->extendProductGroups->first())) {
                        $product->extendProductGroups()->sync($product->extendProductGroups);
                    } else {
                        $product->extendProductGroups()->sync($product->extendProductGroups->pluck('id')->toArray());
                    }
                    $product->load('extendProductGroups');
                } else {
                    $product->extendProductGroups()->sync([]);
                }
            }

            // 处理标签关联
            if ($product->relationLoaded('tags')) {
                if ($product->tags?->count() > 0) {
                    $product->tags()->sync($product->tags);
                } else {
                    $product->tags()->sync([]);
                }
                $product->load('tags');
            }
        });

        // 删除时级联处理
        static::deleting(callback: static function (Product $product) {
            $product->extension()->delete();
            $product->skus()->delete();
        });

        // 恢复时级联处理
        static::restoring(callback: static function (Product $product) {
            $product->skus()->withTrashed()->whereNot('status', ProductStatusEnum::DELETED)->restore();
            $product->extension()->withTrashed()->restore();
        });
    }

    /**
     * 新实例初始化
     */
    public function newInstance($attributes = [], $exists = false): static
    {
        $instance = parent::newInstance($attributes, $exists);

        if (!$instance->exists) {
            $instance->setUniqueIds();
            $instance->setRelation('extension', ProductExtension::make());
            $instance->setRelation('skus', Collection::make());
            $instance->setRelation('extendProductGroups', Collection::make());
            $instance->setRelation('tags', Collection::make());
        }

        return $instance;
    }

    /**
     * 关联关系定义
     */
    public function extension(): HasOne
    {
        return $this->hasOne(ProductExtension::class, 'id', 'id');
    }

    public function tags(): BelongsToMany
    {
        return $this->belongsToMany(ProductTag::class, 'product_tag_pivots', 'product_id', 'product_tag_id')
                    ->withTimestamps();
    }

    /**
     * 查询作用域
     */
    public function scopeOnSale(Builder $query)
    {
        return $query->where('status', ProductStatusEnum::ON_SALE);
    }

    public function scopeWarehoused(Builder $query)
    {
        return $query->where('status', ProductStatusEnum::WAREHOUSED);
    }

    /**
     * 业务方法
     */
    public function setStatus(ProductStatusEnum $status): void
    {
        if (!$this->isAllowSetStatus($status)) {
            throw new ProductException('当前状态不允许设置为：' . $status->value);
        }

        $oldStatus = $this->status;
        $this->status = $status;

        // 状态变更时的业务逻辑
        if ($status === ProductStatusEnum::ON_SALE) {
            $this->on_sale_time = Carbon::now();
        }
    }

    public function isAllowSale(): bool
    {
        return $this->status === ProductStatusEnum::ON_SALE 
            && $this->stock > 0;
    }
}
```


#### 枚举值
- **逻辑复用**：使用  RedJasmine\Support\Helpers\Enums\EnumsHelper Trait 复用通用功能
- **其他**： 补充 labels,colors,icons 方法的配置

##### 代码示例
```php
namespace RedJasmine\Article\Domain\Models\Enums;

use RedJasmine\Support\Helpers\Enums\EnumsHelper;

enum TagStatusEnum: string
{

    use EnumsHelper;

    case DISABLE = 'disable';


    case ENABLE = 'enable';

    /**
     * @return array
     */
    public static function labels() : array
    {
        return [
            self::ENABLE->value  => __('red-jasmine-article::article-tag.enums.status.disable'),
            self::DISABLE->value => __('red-jasmine-article::article-tag.enums.status.enable'),
        ];

    }


    public static function colors() : array
    {
        return [
            self::ENABLE->value  => 'success',
            self::DISABLE->value => 'danger',
        ];

    }

    public static function icons() : array
    {
        return [
            self::ENABLE->value  => 'heroicon-o-check-circle',
            self::DISABLE->value => 'heroicon-o-no-symbol',
        ];
    }
}
```

#### 值对象 (ValueObjects)
##### 规范
- **基类继承**：继承 `RedJasmine\Support\Domain\Models\ValueObjects\ValueObject`
- **不可变性**：值对象应该是不可变的，所有属性都是只读的
- **类型安全**：使用强类型声明和PHPDoc注释
- **命名规范**：值对象名格式为具体业务概念名称
- **业务表达**：值对象应该表达特定的业务概念

##### 代码示例
```php
<?php

namespace RedJasmine\Product\Domain\Product\Models\ValueObjects;

use Illuminate\Support\Collection;
use RedJasmine\Support\Domain\Models\ValueObjects\ValueObject;

class Property extends ValueObject
{
    /**
     * 属性ID
     * @var int
     */
    public int $pid;

    /**
     * 名称
     * @var string
     */
    public string $name;

    /**
     * 单位
     * @var string|null
     */
    public ?string $unit;
    
    /**
     * 属性值
     * @var Collection<PropValue>
     */
    public Collection $values;
}
```

#### 领域服务 (Domain Services)
##### 规范
- **职责明确**：处理不属于任何实体或值对象的业务逻辑
- **无状态性**：领域服务应该是无状态的
- **业务聚焦**：专注于特定的业务逻辑处理
- **命名规范**：服务名格式为 `{业务概念}{Service/Formatter/Calculator}`
- **方法设计**：方法应该表达明确的业务意图

##### 代码示例
```php
<?php

namespace RedJasmine\Product\Domain\Product;

use RedJasmine\Product\Exceptions\ProductPropertyException;

class PropertyFormatter
{
    /**
     * 转换规格名称
     *
     * @param array $labels
     * @return string
     */
    public function toNameString(array $labels): string
    {
        $labelString = [];
        foreach ($labels as $label) {
            $labelString[] = implode(':', [
                $label['name'], 
                filled($label['alias'] ?? '') ? $label['alias'] : $label['value']
            ]);
        }

        return implode(';', $labelString);
    }

    /**
     * 属性笛卡尔积
     *
     * @param array{pid:int,vid:int|int[]} $props
     * @return string[]
     */
    public function crossJoinToString(array $props = []): array
    {
        $crossJoin = $this->crossJoinToArray($props);
        $crossJoinTextList = [];
        foreach ($crossJoin as $item) {
            $crossJoinTextList[] = $this->toString($item);
        }
        return $crossJoinTextList;
    }
}
```

#### 自定义类型转换器 (Custom Casts)
##### 规范
- **接口实现**：实现 `Illuminate\Contracts\Database\Eloquent\CastsAttributes` 接口
- **命名规范**：转换器名格式为 `{属性名}Cast`
- **类型安全**：确保类型转换的安全性和正确性
- **双向转换**：实现 `get` 和 `set` 方法进行双向转换
- **异常处理**：处理转换过程中可能出现的异常

##### 代码示例
```php
<?php

namespace RedJasmine\Product\Domain\Product\Casts;

use Illuminate\Contracts\Database\Eloquent\CastsAttributes;
use Illuminate\Database\Eloquent\Model;

class SalePropsCast implements CastsAttributes
{
    public function get(Model $model, string $key, mixed $value, array $attributes)
    {
        // 实现从数据库到应用的转换逻辑
        return json_decode($value, true);
    }

    public function set(Model $model, string $key, mixed $value, array $attributes)
    {
        // 实现从应用到数据库的转换逻辑
        return json_encode($value);
    }
}
```

#### 领域仓库接口
##### 规范
- **接口继承**：继承 `RedJasmine\Support\Domain\Repositories\RepositoryInterface`
- **方法注释**：使用 PHPDoc 注释指定返回类型
- **命名规范**：接口名格式为 `{Entity}RepositoryInterface`
- **职责单一**：每个仓库接口只负责一个聚合根的写操作

##### 代码示例
```php
<?php

namespace RedJasmine\Article\Domain\Repositories;

use RedJasmine\Article\Domain\Models\Article;
use RedJasmine\Support\Domain\Repositories\RepositoryInterface;

/**
 * @method Article find($id)
 */
interface ArticleRepositoryInterface extends RepositoryInterface
{
    // 可添加特定的写操作方法
}
```

#### 领域只读仓库接口
##### 规范
- **接口继承**：继承 `RedJasmine\Support\Domain\Repositories\ReadRepositoryInterface`
- **命名规范**：接口名格式为 `{Entity}ReadRepositoryInterface`
- **职责分离**：只负责数据查询，不涉及写操作

##### 代码示例
```php
<?php

namespace RedJasmine\Article\Domain\Repositories;

use RedJasmine\Support\Domain\Repositories\ReadRepositoryInterface;

interface ArticleReadRepositoryInterface extends ReadRepositoryInterface
{
    // 可添加特定的查询方法
}
```

#### 数据传输对象 (DTO)
##### 规范
- **基类继承**：继承 `RedJasmine\Support\Data\Data`
- **属性类型**：使用强类型声明，支持 PHP 8.3+ 类型系统
- **枚举转换**：使用 `#[WithCast(EnumCast::class)]` 属性进行枚举转换
- **命名规范**：DTO名格式为 `{Entity}Data`
- **初始化值**：为属性提供合理的默认值
- **用户类型属性**：使用 RedJasmine\Support\Contracts\UserInterface 作为属性类型

##### 代码示例
```php
<?php

namespace RedJasmine\Article\Domain\Data;

use RedJasmine\Support\Contracts\UserInterface;
use RedJasmine\Support\Data\Data;
use RedJasmine\Support\Domain\Models\Enums\ContentTypeEnum;
use Spatie\LaravelData\Attributes\WithCast;
use Spatie\LaravelData\Casts\EnumCast;

class ArticleData extends Data
{
    public UserInterface $owner;

    public string $title;

    #[WithCast(EnumCast::class, ContentTypeEnum::class)]
    public ContentTypeEnum $contentType = ContentTypeEnum::RICH;

    public string $content;

    public ?string $image = null;

    public ?string $description = null;

    public ?string $keywords = null;

    public ?int $categoryId = null;

    public int $sort = 0;

    public bool $isShow = false;

    public array $tags = [];
}
```

#### 复杂业务DTO
##### 规范
- **业务完整性**：DTO应包含完整的业务属性
- **默认值策略**：为业务属性提供合理的默认值
- **集合属性**：使用 Collection 或 array 类型处理集合数据
- **值对象集成**：可包含值对象类型的属性
- **构造函数初始化**：在构造函数中进行复杂的初始化逻辑
- **静态工厂方法**：提供静态方法生成默认配置

##### 代码示例
```php
<?php

namespace RedJasmine\Product\Domain\Product\Data;

use Illuminate\Support\Collection;
use RedJasmine\Ecommerce\Domain\Models\Enums\ProductTypeEnum;
use RedJasmine\Product\Domain\Product\Models\Enums\ProductStatusEnum;
use RedJasmine\Product\Domain\Product\Models\ValueObjects\Medium;
use RedJasmine\Support\Contracts\UserInterface;
use RedJasmine\Support\Data\Data;

/**
 * 产品数据类
 * 该类用于表示产品的各种属性和信息
 */
class Product extends Data
{
    // 基础信息
    public string $market = 'default';
    public ProductTypeEnum $productType;
    public UserInterface $owner;
    public string $title;
    public ?string $slogan;

    // 状态和配置
    public ProductStatusEnum $status = ProductStatusEnum::ON_SALE;
    public FreightPayerEnum $freightPayer = FreightPayerEnum::SELLER;
    public SubStockTypeEnum $subStock = SubStockTypeEnum::DEFAULT;

    // 布尔属性
    public bool $isAloneOrder = false;
    public bool $isPreSale = false;
    public bool $isBrandNew = false;
    public bool $isMultipleSpec = false;
    public bool $isCustomized = false;

    // 数值属性
    public int $unitQuantity = 1;
    public int $deliveryTime = 0;
    public ?int $sort = 0;
    public int $stepLimit = 1;
    public int $giftPoint = 0;

    // ID关联
    public int $categoryId = 0;
    public int $brandId = 0;
    public int $productGroupId = 0;

    // 集合属性
    public array $deliveryMethods = [];
    public array $extendProductGroups = [];
    public array $tags = [];
    public array $services = [];

    // 可选属性
    public ?string $image = null;
    public ?string $barcode = null;
    public ?string $outerId = null;
    public ?string $unit = null;
    public ?string $productModel = null;
    public ?int $freightTemplateId = null;

    // 限制属性
    public ?int $minLimit = 0;
    public ?int $maxLimit = 0;
    public OrderQuantityLimitTypeEnum $orderQuantityLimitType = OrderQuantityLimitTypeEnum::UNLIMITED;
    public ?int $orderQuantityLimitNum = null;

    // 供应商相关
    public bool $isFromSupplier = false;
    public ?UserInterface $supplier;
    public ?int $supplierProductId = null;

    // 内容属性
    public ?string $tips = null;
    public ?string $keywords = null;
    public ?string $description = null;
    public ?string $detail = null;

    // 媒体资源
    /** @var Medium[]|null */
    public ?array $images = null;
    /** @var Medium[]|null */
    public ?array $videos = null;

    // 售后服务
    /** @var AfterSalesService[] */
    public array $afterSalesServices = [];

    // 基础属性
    /** @var Collection<Property>|null */
    public ?Collection $properties = null;

    // 扩展属性
    public ?array $tools;
    public ?array $extra;
    public ?string $remarks;

    public function __construct()
    {
        $this->afterSalesServices = static::defaultAfterSalesServices();
    }

    public static function defaultAfterSalesServices(): array
    {
        return [
            // 默认售后服务配置
        ];
    }
}
```

#### 领域转换器
##### 规范
- **接口实现**：实现 `RedJasmine\Support\Domain\Transformer\TransformerInterface`
- **方法定义**：`transform($data, $model): Model`
- **命名规范**：转换器名格式为 `{Entity}Transformer`
- **数据映射**：负责将DTO数据映射到领域模型
- **关联处理**：处理模型关联关系的设置

##### 代码示例
```php
<?php

namespace RedJasmine\Article\Domain\Transformer;

use Illuminate\Database\Eloquent\Model;
use RedJasmine\Article\Domain\Data\ArticleData;
use RedJasmine\Article\Domain\Models\Article;
use RedJasmine\Support\Domain\Transformer\TransformerInterface;

class ArticleTransformer implements TransformerInterface
{
    /**
     * @param ArticleData $data
     * @param Article $model
     * @return Article
     */
    public function transform($data, $model): Article
    {
        $model->title = $data->title;
        $model->image = $data->image;
        $model->description = $data->description;
        $model->keywords = $data->keywords;
        $model->category_id = $data->categoryId ?? $model->category_id;
        $model->sort = $data->sort;
        $model->is_show = $data->isShow;
        $model->extension->content_type = $data->contentType;
        $model->extension->content = $data->content;
        $model->setRelation('tags', collect($data->tags));

        return $model;
    }
}
```

### 应用层 (Application)

#### 应用服务
##### 规范
- **基类继承**：继承 `RedJasmine\Support\Application\ApplicationService`
- **依赖注入**：通过构造函数注入仓库和转换器，使用 public 可见性
- **静态属性**：定义 `$modelClass`、`$macros` 和 `$hookNamePrefix`
- **命名规范**：服务名格式为 `{Entity}ApplicationService`
- **宏扩展**：使用 `$macros` 数组扩展自定义方法
- **Hook机制**：使用 hook 方法实现扩展点管理
- **PHPDoc注解**：使用 `@see` 和 `@method` 进行详细说明
- **默认信息**：实现 `getDefaultModelWithInfo()` 方法配置默认加载关联

##### 代码示例
```php
<?php

namespace RedJasmine\Product\Application\Product\Services;

use RedJasmine\Product\Domain\Product\Models\Product;
use RedJasmine\Product\Domain\Product\Repositories\ProductReadRepositoryInterface;
use RedJasmine\Product\Domain\Product\Repositories\ProductRepositoryInterface;
use RedJasmine\Support\Application\ApplicationService;

/**
 * 产品应用服务
 * 
 * 负责处理产品相关的业务逻辑，包括：
 * - 产品创建
 * - 产品更新
 * - 状态管理
 * 
 * @see ProductCreateCommandHandler::handle()
 * @method Product create(ProductCreateCommand $command)
 * @see ProductUpdateCommandHandler::handle()
 * @method void update(ProductUpdateCommand $command)
 * @method void setStatus(ProductSetStatusCommand $command)
 */
class ProductApplicationService extends ApplicationService
{
    /**
     * Hook前缀配置
     * @var string
     */
    public static string $hookNamePrefix = 'product.application.product';

    protected static string $modelClass = Product::class;

    public function __construct(
        public ProductRepositoryInterface $repository,
        public ProductReadRepositoryInterface $readRepository
    ) {
    }

    public function getDefaultModelWithInfo(): array
    {
        return ['extension', 'tags'];
    }

    protected static $macros = [
        'create'    => ProductCreateCommandHandler::class,
        'update'    => ProductUpdateCommandHandler::class,
        'delete'    => ProductDeleteCommandHandler::class,
        'setStatus' => ProductSetStatusCommandHandler::class,
    ];
}
```


#### 命令
##### 规范
- **基类继承**：继承领域层的基础DTO 或者 继承 `RedJasmine\Support\Data\Data`
- **人员对象类属性**：类型定义为  `RedJasmine\Support\Contracts\UserInterface` 即可

##### 示例
```php
use RedJasmine\Article\Domain\Data\ArticleData;

class ArticleCreateCommand extends ArticleData
{
    public UserInterface $owner;
}
```


#### 查询
##### 规范
- **基类继承**：继承 `RedJasmine\Support\Application\Queries\Query`
- **分页查询继承**：继承 `RedJasmine\Support\Application\Queries\PaginationQuery`
- **查找单个查询继承**：继承 `RedJasmine\Support\Application\Queries\FindQuery`
- **命名规范**：查询名格式为 `{Entity}Query`

#### 示例
```php
<?php

namespace RedJasmine\Article\Application\Services\Article\Queries;

use RedJasmine\Support\Application\Queries\PaginationQuery;

class ArticleListQuery extends PaginationQuery
{
    
}
```

#### 命令处理器
##### 规范
- **基类继承**：继承 `RedJasmine\Support\Application\Commands\CommandHandler`
- **依赖注入**：通过构造函数注入应用服务
- **事务处理**：使用数据库事务确保数据一致性
- **异常处理**：捕获并重新抛出异常，确保事务回滚
- **命名规范**：处理器名格式为 `{Action}CommandHandler`

##### 代码示例
```php
<?php

namespace RedJasmine\Article\Application\Services\Article\Commands;

use RedJasmine\Article\Application\Services\Article\ArticleApplicationService;
use RedJasmine\Support\Application\Commands\CommandHandler;
use RedJasmine\Support\Exceptions\AbstractException;
use Throwable;

class ArticlePublishCommandHandler extends CommandHandler
{
    public function __construct(
        protected ArticleApplicationService $service
    ) {
    }

    /**
     * @param ArticlePublishCommand $command
     * @return bool
     * @throws AbstractException
     * @throws Throwable
     */
    public function handle(ArticlePublishCommand $command): bool
    {
        $this->beginDatabaseTransaction();

        try {
            $model = $this->service->repository->find($command->getKey());
            $model->publish();
            $this->service->repository->update($model);
            
            $this->commitDatabaseTransaction();
        } catch (AbstractException $exception) {
            $this->rollBackDatabaseTransaction();
            throw $exception;
        } catch (Throwable $throwable) {
            $this->rollBackDatabaseTransaction();
            throw $throwable;
        }

        return true;
    }
}
```

#### 查询处理器
##### 规范
- **基类继承**：继承 `RedJasmine\Support\Application\Queries\QueryHandler`
- **只读操作**：只进行数据查询，不进行写操作
- **分页支持**：支持分页查询功能
- **过滤器**：提供灵活的查询过滤器
- **命名规范**：处理器名格式为 `{Action}QueryHandler`

#### 命令处理器基类
##### 规范
- **基类继承**：继承 `RedJasmine\Support\Application\Commands\CommandHandler`
- **共享逻辑**：提供子类共用的验证和处理逻辑
- **依赖注入**：注入相关的应用服务和领域服务
- **命名规范**：基类名格式为 `{Entity}CommandHandler`
- **验证方法**：提供统一的验证方法
- **事务处理**：统一事务管理逻辑

##### 代码示例
```php
<?php

namespace RedJasmine\Product\Application\Product\Services\Commands;

use RedJasmine\Product\Application\Product\Services\ProductApplicationService;
use RedJasmine\Product\Domain\Product\PropertyFormatter;
use RedJasmine\Product\Domain\Product\Transformer\ProductTransformer;
use RedJasmine\Product\Exceptions\ProductException;
use RedJasmine\Support\Application\Commands\CommandHandler;
use Throwable;

/**
 * 产品命令处理器基类
 * 
 * @method ProductApplicationService getService()
 */
class ProductCommandHandler extends CommandHandler
{
    public function __construct(
        public ProductApplicationService $service,
        protected BrandApplicationService $brandQueryService,
        protected StockCommandService $stockCommandService,
        protected PropertyFormatter $propertyFormatter,
        protected PropertyValidateService $propertyValidateService,
        protected ProductCategoryApplicationService $categoryQueryService,
        protected ProductGroupApplicationService $groupQueryService,
        protected ProductTransformer $productTransformer
    ) {
    }

    /**
     * 统一验证逻辑
     *
     * @param \RedJasmine\Product\Domain\Product\Data\Product $command
     * @return void
     * @throws ProductException
     */
    protected function validate(\RedJasmine\Product\Domain\Product\Data\Product $command): void
    {
        $this->validateBrand($command);
        $this->validateCategory($command);
        $this->validateSellerCategory($command);
    }

    /**
     * 品牌验证
     *
     * @param \RedJasmine\Product\Domain\Product\Data\Product $command
     * @return void
     * @throws ProductException
     */
    protected function validateBrand(\RedJasmine\Product\Domain\Product\Data\Product $command): void
    {
        try {
            if ($command->brandId && !$this->brandQueryService->isAllowUse($command->brandId)) {
                throw new ProductException('品牌不可使用');
            }
        } catch (Throwable $exception) {
            throw new ProductException('品牌不可使用');
        }
    }

    /**
     * 库存处理逻辑
     *
     * @param Product $product
     * @param \RedJasmine\Product\Domain\Product\Data\Product $command
     * @return void
     * @throws Throwable
     */
    protected function handleStock(Product $product, \RedJasmine\Product\Domain\Product\Data\Product $command): void
    {
        $skuCommand = $command->skus?->keyBy('properties');

        foreach ($product->skus as $sku) {
            $stock = $sku->deleted_at ? 0 : ($skuCommand[$sku->properties]?->stock ?? $command->stock);

            $stockCommand = new StockCommand();
            $stockCommand->productId = $sku->product_id;
            $stockCommand->actionType = ProductStockActionTypeEnum::RESET;
            $stockCommand->skuId = $sku->id;
            $stockCommand->actionStock = $stock;
            $stockCommand->changeType = ProductStockChangeTypeEnum::SELLER;

            $this->stockCommandService->reset($stockCommand);
        }
    }
}
```

### 基础设施层 (Infrastructure)

#### 仓库实现 (Eloquent)
##### 规范
- **基类继承**：继承 `RedJasmine\Support\Infrastructure\Repositories\Eloquent\EloquentRepository`
- **接口实现**：实现对应的领域仓库接口
- **静态属性**：定义 `$eloquentModelClass` 指定Eloquent模型
- **命名规范**：实现类名格式为 `{Entity}Repository`
- **职责专一**：只负责写操作的具体实现

##### 代码示例
```php
<?php

namespace RedJasmine\Article\Infrastructure\Repositories\Eloquent;

use RedJasmine\Article\Domain\Models\Article;
use RedJasmine\Article\Domain\Repositories\ArticleRepositoryInterface;
use RedJasmine\Support\Infrastructure\Repositories\Eloquent\EloquentRepository;

class ArticleRepository extends EloquentRepository implements ArticleRepositoryInterface
{
    protected static string $eloquentModelClass = Article::class;
}
```

#### 只读仓库实现 (MySQL)
##### 规范
- **基类继承**：继承 `RedJasmine\Support\Infrastructure\ReadRepositories\QueryBuilderReadRepository`
- **接口实现**：实现对应的领域只读仓库接口
- **静态属性**：定义 `$modelClass` 指定模型类
- **过滤器配置**：实现 `allowedFilters()` 方法配置查询过滤器
- **排序配置**：实现 `allowedSorts()` 方法配置允许的排序字段
- **包含关联**：实现 `allowedIncludes()` 方法配置可包含的关联
- **自定义查询**：可添加特定的查询方法，如 `findList()`
- **命名规范**：实现类名格式为 `{Entity}ReadRepository`

##### 代码示例
```php
<?php

namespace RedJasmine\Product\Infrastructure\ReadRepositories\Mysql;

use RedJasmine\Product\Domain\Product\Models\Product;
use RedJasmine\Product\Domain\Product\Repositories\ProductReadRepositoryInterface;
use RedJasmine\Support\Infrastructure\ReadRepositories\QueryBuilderReadRepository;
use Spatie\QueryBuilder\AllowedFilter;
use Spatie\QueryBuilder\AllowedSort;

class ProductReadRepository extends QueryBuilderReadRepository implements ProductReadRepositoryInterface
{
    public static $modelClass = Product::class;

    /**
     * 批量查询
     *
     * @param array $ids
     * @return Product[]
     */
    public function findList(array $ids)
    {
        return $this->query()->whereIn('id', $ids)->get();
    }

    /**
     * 允许的排序字段配置
     */
    public function allowedSorts(): array
    {
        return [
            AllowedSort::field('price'),
            AllowedSort::field('cost_price'),
            AllowedSort::field('market_price'),
            AllowedSort::field('sales'),
            AllowedSort::field('stock'),
            AllowedSort::field('on_sale_time'),
            AllowedSort::field('modified_time'),
        ];
    }

    /**
     * 允许的过滤器配置
     */
    public function allowedFilters(): array
    {
        return [
            AllowedFilter::partial('title'),
            AllowedFilter::exact('id'),
            AllowedFilter::exact('market'),
            AllowedFilter::exact('owner_type'),
            AllowedFilter::exact('owner_id'),
            AllowedFilter::exact('product_type'),
            AllowedFilter::exact('status'),
            AllowedFilter::exact('brand_id'),
            AllowedFilter::exact('category_id'),
            AllowedFilter::exact('product_group_id'),
            AllowedFilter::exact('barcode'),
            AllowedFilter::exact('product_model'),
        ];
    }

    /**
     * 允许包含的关联配置
     */
    public function allowedIncludes(): array
    {
        return [
            'extension',
            'services',
            'skus',
            'brand',
            'category',
            'productGroups',
            'extendProductGroups',
            'series',
            'tags',
        ];
    }
}
```

### 用户接口层 (UI)

#### Http 
- **目录结构**：按角色划分，每个角色对应一个目录
- **命名规范**：路由格式为 `{role}`
- **路由文件**：定义路由文件 `{Domain}{Role}Route`
```php
class ArticleUserRoute
{

    public static function api() : void
    {
        Route::group(['prefix' => 'article'], function () {
            Route::apiResource('articles', ArticleController::class);
            Route::get('categories/tree', [ArticleCategoryController::class, 'tree']);
            Route::apiResource('categories', ArticleCategoryController::class);
        });

    }

    public static function web():void
    {

    }

}
```

#### 控制器
##### 规范
- **基类继承**：继承适当的基础控制器类
- **RestfulActions**：使用 `RestControllerActions` Trait 提供标准CRUD操作
- **静态属性配置**：定义资源类、查询类、模型类和数据类
- **依赖注入**：通过构造函数注入应用服务
- **权限控制**：实现 `authorize()` 方法进行权限验证
- **查询作用域**：在构造函数中设置查询作用域
- **命名规范**：控制器名格式为 `{Entity}Controller`

##### 代码示例
```php
<?php

namespace RedJasmine\Article\UI\Http\Admin\Api\Controllers;

use RedJasmine\Article\Application\Services\Article\ArticleApplicationService;
use RedJasmine\Article\Application\Services\Article\Queries\PaginateQuery;
use RedJasmine\Article\Domain\Data\ArticleData as Data;
use RedJasmine\Article\Domain\Models\Article as Model;
use RedJasmine\Article\UI\Http\User\Api\Resources\ArticleResource as Resource;
use RedJasmine\Support\UI\Http\Controllers\RestControllerActions;

class ArticleController extends Controller
{
    protected static string $resourceClass      = Resource::class;
    protected static string $paginateQueryClass = PaginateQuery::class;
    protected static string $modelClass         = Model::class;
    protected static string $dataClass          = Data::class;

    use RestControllerActions;

    public function __construct(
        protected ArticleApplicationService $service,
    ) {
        $this->service->readRepository->withQuery(function ($query) {
            $query->onlyOwner($this->getOwner());
        });
    }

    public function authorize($ability, $arguments = []): bool
    {
        return true;
    }
}
```

#### API资源
##### 规范
- **基类继承**：继承 `RedJasmine\Support\UI\Http\Resources\Json\JsonResource` 或框架提供的基础资源类
- **数据转换**：将模型数据转换为API响应格式
- **关联加载**：合理处理关联数据的加载和展示
- **条件字段**：根据条件显示不同的字段
- **命名规范**：资源类名格式为 `{Entity}Resource`

#### 请求验证
##### 规范
- **基类继承**：继承 `FormRequest` 或框架提供的基础请求类
- **验证规则**：定义 `rules()` 方法返回验证规则
- **错误消息**：定义 `messages()` 方法返回自定义错误消息
- **数据准备**：实现 `prepareForValidation()` 方法准备验证数据
- **命名规范**：请求类名格式为 `{Action}{Entity}Request`

## 异常处理规范

### 领域异常
#### 规范
- **基类继承**：继承 `RedJasmine\Support\Exceptions\AbstractException`
- **命名规范**：异常类名格式为 `{Entity}Exception`
- **错误码**：定义明确的错误码
- **错误消息**：提供清晰的错误描述
- **语言支持**：支持多语言错误消息

#### 代码示例
```php
<?php

namespace RedJasmine\Article\Exceptions;

use RedJasmine\Support\Exceptions\AbstractException;

class ArticleException extends AbstractException
{
    // 可添加特定的异常处理逻辑
}
```


## 文档规范

### 1. 文档结构要求

#### 目录结构规范
```
docs/
├── {domain}/                    # 领域文档目录
│   ├── index.md                # 领域介绍文档（必需）
│   ├── storage.md              # 存储层设计文档（必需）
│   ├── {submodule}/            # 子模块文档目录
│   │   ├── index.md            # 子模块介绍（必需）
│   │   ├── model.puml          # 领域模型UML（必需）
│   │   ├── events.puml         # 领域事件UML（可选）
│   │   ├── sequence.puml       # 时序图UML（可选）
│   │   └── rules.md            # 核心规则说明（可选）
│   ├── *.puml                  # 领域级UML图（可选）
│   └── assets/                 # 静态资源目录（可选）
│       ├── images/             # 图片资源
│       └── diagrams/           # 图表资源
```

#### 文件命名规范
- **领域目录**：使用英文小写，如 `distribution`、`payment`、`user`
- **子模块目录**：使用英文小写，如 `promoter`、`order`、`wallet`
- **UML文件**：使用英文小写，如 `model.puml`、`events.puml`
- **Markdown文件**：使用英文小写，如 `index.md`、`storage.md`

### 2. 文档格式规范

#### 2.1 文档头部配置规则
- **必需配置项**：
  - `title`：文档标题，使用中文
  - `description`：文档描述，简要说明文档内容
  - `outline`：大纲深度，设置为 `deep`
  - `order`：文档排序，使用数字
- **可选配置项**：
  - `lastUpdated`：最后更新时间，设置为 `true`
  - `tags`：文档标签，用于分类
  - `author`：文档作者

#### 2.2 概述部分规则
- **概述内容**：必须包含领域的基本情况、主要职责、业务价值
- **问题域**：列出领域要解决的核心问题
- **业务价值**：说明领域为业务带来的价值
- **语言要求**：使用清晰、准确的中文描述

#### 2.3 核心能力描述规则
- **分类要求**：按功能模块分类描述核心能力
- **描述格式**：每个能力包含功能名称和具体说明
- **数量要求**：核心能力数量控制在3-6个
- **重点突出**：突出领域最核心、最重要的功能

#### 2.4 领域参与角色规则
- **分类要求**：必须区分内部角色和外部角色
- **角色描述**：每个角色必须说明职责和权限
- **角色数量**：内部角色控制在4-6个，外部角色控制在3-5个
- **命名规范**：角色名称使用中文，职责描述清晰明确

#### 2.5 连接领域规则
- **分类要求**：必须区分上游领域和下游领域
- **依赖说明**：说明与每个连接领域的依赖关系
- **接口描述**：简要说明与连接领域的接口
- **数量控制**：上下游领域各控制在3-5个

#### 2.6 核心用例规则
- **用例格式**：使用标准用例格式，包含参与者、前置条件、主流程、后置条件
- **用例编号**：使用UC001、UC002等格式编号
- **用例数量**：核心用例控制在3-5个
- **流程描述**：主流程使用步骤列表，步骤清晰明确

#### 2.7 统一语言表规则
- **表格结构**：必须包含英文名称、中文名称、说明、示例四列
- **术语数量**：控制在30个以内核心术语
- **命名规范**：英文名称使用PascalCase，中文名称简洁明了
- **示例要求**：每个术语必须提供使用示例

#### 2.8 领域模型规则
- **UML引用**：必须通过include方式引用UML文件
- **模型说明**：必须提供核心实体的说明
- **实体数量**：核心实体控制在5-8个
- **关系描述**：说明实体间的主要关系

### 3. UML 规范

#### 3.1 命名规范
- **类名**：必须使用中文，如 `分销员`、`佣金`、`推广订单`
- **属性名**：必须使用中文，如 `用户ID`、`佣金金额-CommissionAmount`