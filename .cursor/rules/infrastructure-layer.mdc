---
alwaysApply: true
---

# 基础设施层(Infrastructure)代码规范

## 仓库接口实现

### 规范
- **统一实现**: 仓库实现统一继承 `RedJasmine\Support\Infrastructure\Repositories\Repository`
- **接口统一**: 仓库接口统一实现 `RedJasmine\Support\Domain\Repositories\RepositoryInterface`
- **目录结构**: 仓库实现保留在 `src\Infrastructure\Repositories` 目录下，无需更深的一层目录结构
- **简化配置**: 不再区分写仓库和读仓库，统一通过Repository实现所有操作

### 代码示例
```php
class ArticleRepository extends Repository implements ArticleRepositoryInterface
{
    protected static string $modelClass = Article::class;
    
    // 可以添加特定的方法
    public function findBySlug(string $slug): ?Article
    {
        return static::$modelClass::where('slug', $slug)->first();
    }
}
```

## 过滤器配置规范

### 常用过滤器类型
- `AllowedFilter::exact()` - 精确匹配
- `AllowedFilter::partial()` - 部分匹配（LIKE查询）
- `AllowedFilter::scope()` - 使用模型作用域
- `AllowedFilter::callback()` - 自定义回调

### 代码示例
```php
public function allowedFilters(): array
{
    return [
        // 精确匹配
        AllowedFilter::exact('id'),
        AllowedFilter::exact('status'),
        AllowedFilter::exact('category_id'),
        
        // 部分匹配
        AllowedFilter::partial('title'),
        AllowedFilter::partial('content'),
        
        // 使用模型作用域
        AllowedFilter::scope('published'),
        AllowedFilter::scope('draft'),
        
        // 自定义回调
        AllowedFilter::callback('created_between', function ($query, $value) {
            [$start, $end] = $value;
            return $query->whereBetween('created_at', [$start, $end]);
        }),
    ];
}
```

## 排序配置规范

### 常用排序类型
- `AllowedSort::field()` - 字段排序
- `AllowedSort::callback()` - 自定义排序逻辑

### 代码示例
```php
public function allowedSorts(): array
{
    return [
        // 字段排序
        AllowedSort::field('id'),
        AllowedSort::field('title'),
        AllowedSort::field('created_at'),
        AllowedSort::field('updated_at'),
        AllowedSort::field('sort'),
        
        // 自定义排序
        AllowedSort::callback('popularity', function ($query, $descending) {
            return $query->orderBy('view_count', $descending ? 'desc' : 'asc')
                         ->orderBy('like_count', $descending ? 'desc' : 'asc');
        }),
    ];
}
```

## 关联包含配置规范

### 规范
- **关联名称**: 使用模型中定义的关联方法名
- **嵌套关联**: 支持点号分隔的嵌套关联
- **性能考虑**: 避免包含过多关联，影响查询性能

### 代码示例
```php
public function allowedIncludes(): array
{
    return [
        'category',
        'tags',
        'extension',
        'author',
        'category.parent',  // 嵌套关联
        'tags.category',    // 嵌套关联
    ];
}
```

## 查询构建器使用规范

### 规范
- **查询作用域**: 使用 `withQuery()` 方法添加查询作用域
- **默认排序**: 设置 `$defaultSort` 属性指定默认排序
- **查询优化**: 合理使用索引，避免N+1查询问题
- **分页优化**: 根据需要选择 `paginate()` 或 `simplePaginate()` 方法

### 代码示例
```php
// 在ApplicationService中使用查询作用域
$this->service->repository->withQuery(function ($query) {
    $query->onlyOwner($this->getOwner());
    $query->where('status', 'published');
});

// 在Repository中设置默认排序
protected mixed $defaultSort = '-created_at';
```
