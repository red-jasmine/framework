<?php

namespace RedJasmine\Support\Exceptions;


use Illuminate\Auth\AuthenticationException;
use Illuminate\Contracts\Container\Container;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Illuminate\Support\Arr;
use Illuminate\Validation\ValidationException;
use Throwable;

class Handler extends ExceptionHandler
{
    public function __construct(Container $container)
    {
        parent::__construct($container);

        // 业务异常 进行
        $this->ignore(AbstractException::class);
    }

    protected function convertExceptionToArray(Throwable $e) : array
    {

        if ($e instanceof AbstractException) {
            return config('app.debug') ? [
                'data'      => $e->getData(),
                'code'      => $e->getCode(),
                'message'   => $e->getMessage(),
                'errors'    => $e->errors(),
                'exception' => get_class($e),
                'file'      => $e->getFile(),
                'line'      => $e->getLine(),
                'trace'     => collect($e->getTrace())->map(fn($trace) => Arr::except($trace, [ 'args' ]))->all(),
            ] : [
                'data'    => $e->getData(),
                'code'    => $e->getCode(),
                'message' => $e->getMessage(),
                'errors'  => $e->errors(),
            ];

            return [

            ];
        }
        return parent::convertExceptionToArray($e); // TODO: Change the autogenerated stub
    }

    /**
     * Convert a validation exception into a JSON response.
     *
     * @param \Illuminate\Http\Request $request
     * @param \Illuminate\Validation\ValidationException $exception
     * @return \Illuminate\Http\JsonResponse
     */
    protected function invalidJson($request, ValidationException $exception)
    {

        return response()->json([
                                    'message' => $exception->getMessage(),
                                    'errors'  => $exception->errors(),
                                    'code'    => 422
                                ], $exception->status);
    }
    /**
     * Convert an authentication exception into a response.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Illuminate\Auth\AuthenticationException  $exception
     * @return \Symfony\Component\HttpFoundation\Response
     */
    protected function unauthenticated($request, AuthenticationException $exception)
    {
        return $this->shouldReturnJson($request, $exception)
            ? response()->json(['message' => $exception->getMessage(),'code'=>401], 401)
            : redirect()->guest($exception->redirectTo() ?? route('login'));
    }

}
