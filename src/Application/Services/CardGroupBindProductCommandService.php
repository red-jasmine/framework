<?php

namespace RedJasmine\Card\Application\Services;

use Illuminate\Database\Eloquent\Model;
use RedJasmine\Card\Application\Services\CommandHandlers\CardGroupBindProduct\CardGroupBindProductBindCommandHandler;
use RedJasmine\Card\Application\Services\Pipelines\CardGroupPipeline;
use RedJasmine\Card\Application\UserCases\Command\GroupBindProduct\CardGroupBindProductBindCommand;
use RedJasmine\Card\Application\UserCases\Command\GroupBindProduct\CardGroupBindProductCreateCommand;
use RedJasmine\Card\Domain\Models\CardGroupBindProduct;
use RedJasmine\Card\Domain\Repositories\CardGroupBindProductRepositoryInterface;
use RedJasmine\Card\Exceptions\CardException;
use RedJasmine\Support\Application\ApplicationCommandService;
use RedJasmine\Support\Application\Handlers\CreateCommandHandler;
use RedJasmine\Support\Application\Handlers\DeleteCommandHandler;
use RedJasmine\Support\Application\Handlers\UpdateCommandHandler;


/**
 * @method bind(CardGroupBindProductBindCommand $command)
 * @method CardGroupBindProductRepositoryInterface  getRepository()
 */
class CardGroupBindProductCommandService extends ApplicationCommandService
{


    protected static string $modelClass = CardGroupBindProduct::class;


    public function __construct(
        public CardGroupBindProductRepositoryInterface $repository,
    )
    {

        parent::__construct();
    }

    /**
     * @param CardGroupBindProductCreateCommand $command
     *
     * @return Model
     * @throws \Exception
     */
    public function newModel($command = null) : Model
    {

        // 验证商品是否已经绑定

        if ($this->repository->findByProduct($command->owner, $command->productType, $command->productId, $command->skuId)) {
            throw new CardException('商品已绑定分组');
        }


        return parent::newModel($command); // TODO: Change the autogenerated stub
    }


    protected static $macros = [
        'create' => CreateCommandHandler::class,
        'update' => UpdateCommandHandler::class,
        'delete' => DeleteCommandHandler::class,
        'bind'   => CardGroupBindProductBindCommandHandler::class
    ];

    protected function pipelines() : array
    {
        return [
            'create' => [
                CardGroupPipeline::class
            ],
            'update' => [
                CardGroupPipeline::class
            ],
            'bind'   => [
                CardGroupPipeline::class
            ],
        ];
    }

}
