@startuml poster_template_detail

title 海报模板管理子模块 - 详细设计 / Poster Template Management Module - Detailed Design

package "海报模板聚合" {
    class PosterTemplate <<海报模板>> {
        +id: TemplateId
        +name: String
        +description: String
        +category: TemplateCategory
        +tags: Collection<TemplateTag>
        +designData: Json
        +previewImage: String
        +width: Integer
        +height: Integer
        +configElements: Collection<ConfigElement>
        +defaultValues: Json
        +isActive: Boolean
        +sortOrder: Integer
        +creator: Creator
        +createdAt: DateTime
        +updatedAt: DateTime
        --
        +render(data): PosterGenerationTask
        +validateConfig(data): ValidationResult
        +generatePreview(): String
        +clone(): PosterTemplate
        +activate(): void
        +deactivate(): void
        +updateDesign(designData): void
        +addConfigElement(element): void
        +removeConfigElement(elementId): void
    }

    class PosterGenerationTask <<海报生成任务>> {
        +id: TaskId
        +templateId: TemplateId
        +invitationCodeId: InvitationCodeId
        +renderData: Json
        +customContent: Json
        +status: GenerationStatus
        +priority: TaskPriority
        +filePath: String
        +downloadUrl: String
        +fileSize: Long
        +renderTime: Duration
        +errorMessage: String
        +createdAt: DateTime
        +completedAt: DateTime
        --
        +start(): void
        +complete(filePath): void
        +fail(error): void
        +retry(): void
        +getProgress(): Progress
        +estimateTime(): Duration
    }

    class MaterialAsset <<素材资源>> {
        +id: AssetId
        +name: String
        +type: AssetType
        +category: AssetCategory
        +filePath: String
        +fileUrl: String
        +fileSize: Long
        +mimeType: String
        +width: Integer
        +height: Integer
        +metadata: Json
        +tags: Collection<AssetTag>
        +isPublic: Boolean
        +copyright: CopyrightInfo
        +uploadedBy: String
        +uploadedAt: DateTime
        --
        +optimize(): OptimizedAsset
        +generateThumbnail(): String
        +validateFormat(): ValidationResult
        +updateMetadata(metadata): void
    }
}

package "值对象" {
    class ConfigElement <<配置元素>> {
        +id: String
        +name: String
        +type: ElementType
        +position: Position
        +constraints: ElementConstraints
        +defaultValue: String
        +isRequired: Boolean
        --
        +validate(value): ValidationResult
        +render(value): RenderedElement
    }

    class Position <<位置坐标>> {
        +x: Integer
        +y: Integer
        +width: Integer
        +height: Integer
        +rotation: Double
        +zIndex: Integer
        --
        +move(deltaX, deltaY): Position
        +resize(width, height): Position
        +rotate(angle): Position
    }

    class ElementConstraints <<元素约束>> {
        +minLength: Integer
        +maxLength: Integer
        +allowedFormats: Collection<String>
        +maxFileSize: Long
        +allowedColors: Collection<Color>
        --
        +validate(value): ValidationResult
        +getSuggestions(): Collection<String>
    }

    class CopyrightInfo <<版权信息>> {
        +owner: String
        +license: LicenseType
        +usage: UsageRights
        +expiresAt: DateTime
        +attribution: String
        --
        +isValidForUse(): Boolean
        +getAttributionText(): String
    }

    class Progress <<生成进度>> {
        +currentStep: String
        +totalSteps: Integer
        +completedSteps: Integer
        +percentage: Double
        +estimatedRemaining: Duration
        --
        +update(step): Progress
        +isCompleted(): Boolean
    }

    class RenderedElement <<渲染元素>> {
        +elementId: String
        +content: String
        +style: Json
        +position: Position
        +effects: Collection<Effect>
        --
        +applyEffect(effect): RenderedElement
        +toImageData(): ImageData
    }
}

package "领域服务" {
    class TemplateRenderer <<模板渲染器>> {
        --
        +render(template, data): PosterGenerationTask
        +renderPreview(template): String
        +validateRenderData(template, data): ValidationResult
        +estimateRenderTime(template): Duration
        +optimizeTemplate(template): PosterTemplate
    }

    class MaterialManager <<素材管理器>> {
        --
        +uploadAsset(file, metadata): MaterialAsset
        +optimizeAsset(asset): OptimizedAsset
        +generateThumbnail(asset): String
        +validateAsset(asset): ValidationResult
        +searchAssets(criteria): Collection<MaterialAsset>
        +categorizeAsset(asset): AssetCategory
    }

    class QRCodeGenerator <<二维码生成器>> {
        --
        +generateQRCode(data): String
        +generateWithLogo(data, logo): String
        +validateQRCode(qrCode): ValidationResult
        +customizeStyle(qrCode, style): String
    }

    class ImageProcessor <<图像处理器>> {
        --
        +resize(image, width, height): ProcessedImage
        +compress(image, quality): ProcessedImage
        +addWatermark(image, watermark): ProcessedImage
        +crop(image, area): ProcessedImage
        +applyFilter(image, filter): ProcessedImage
    }

    class FontManager <<字体管理器>> {
        --
        +loadFont(fontFile): Font
        +renderText(text, font, style): TextImage
        +validateFont(font): ValidationResult
        +getFontMetrics(font): FontMetrics
        +optimizeFont(font): OptimizedFont
    }
}

package "枚举类型" {
    enum TemplateCategory <<模板分类>> {
        PRODUCT_PROMOTION
        BRAND_MARKETING
        EVENT_ACTIVITY
        SOCIAL_SHARING
        FESTIVAL_GREETING
        BUSINESS_CARD
    }

    enum AssetType <<素材类型>> {
        IMAGE
        FONT
        ICON
        BACKGROUND
        DECORATION
        LOGO
    }

    enum AssetCategory <<素材分类>> {
        BUSINESS
        LIFESTYLE
        TECHNOLOGY
        FOOD
        FASHION
        EDUCATION
    }

    enum ElementType <<元素类型>> {
        TEXT
        IMAGE
        QRCODE
        SHAPE
        ICON
        BACKGROUND
    }

    enum GenerationStatus <<生成状态>> {
        PENDING
        PROCESSING
        COMPLETED
        FAILED
        CANCELLED
    }

    enum TaskPriority <<任务优先级>> {
        LOW
        NORMAL
        HIGH
        URGENT
    }

    enum LicenseType <<许可证类型>> {
        COMMERCIAL
        PERSONAL
        EDITORIAL
        ROYALTY_FREE
    }
}

package "仓储接口" {
    interface PosterTemplateRepository {
        +findById(id): PosterTemplate
        +findByCategory(category): Collection
        +findActive(): Collection
        +save(template): void
        +delete(template): void
        +findByTag(tag): Collection
        +search(criteria): Collection
    }

    interface PosterGenerationTaskRepository {
        +findById(id): PosterGenerationTask
        +findByStatus(status): Collection
        +findPending(): Collection
        +save(task): void
        +findByInvitationCode(codeId): Collection
        +getStatistics(period): TaskStatistics
    }

    interface MaterialAssetRepository {
        +findById(id): MaterialAsset
        +findByType(type): Collection
        +findByCategory(category): Collection
        +save(asset): void
        +delete(asset): void
        +search(criteria): Collection
        +findPublic(): Collection
    }
}

' 关系定义
PosterTemplate ||--o{ ConfigElement : "包含"
PosterTemplate ||--|| TemplateCategory : "分类"
PosterTemplate ||--o{ PosterGenerationTask : "生成"

PosterGenerationTask ||--|| GenerationStatus : "状态"
PosterGenerationTask ||--|| TaskPriority : "优先级"
PosterGenerationTask ||--|| Progress : "进度"

MaterialAsset ||--|| AssetType : "类型"
MaterialAsset ||--|| AssetCategory : "分类"
MaterialAsset ||--|| CopyrightInfo : "版权"

ConfigElement ||--|| ElementType : "元素类型"
ConfigElement ||--|| Position : "位置"
ConfigElement ||--|| ElementConstraints : "约束"

TemplateRenderer ..> PosterTemplate : "渲染"
TemplateRenderer ..> PosterGenerationTask : "生成"
MaterialManager ..> MaterialAsset : "管理"
QRCodeGenerator ..> RenderedElement : "生成"
ImageProcessor ..> MaterialAsset : "处理"
FontManager ..> MaterialAsset : "处理"

PosterTemplateRepository ..> PosterTemplate : "存储"
PosterGenerationTaskRepository ..> PosterGenerationTask : "存储"
MaterialAssetRepository ..> MaterialAsset : "存储"

@enduml 