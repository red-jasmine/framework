@startuml 优惠券领域模型

' 枚举定义
enum 优惠券状态 <<enumeration>> {
    草稿
    已发布
    已暂停
    已过期
}

enum 用户优惠券状态 <<enumeration>> {
    可用
    已使用
    已过期
}

enum 优惠计算方式 <<enumeration>> {
    固定金额
    百分比折扣
}

enum 门槛类型 <<enumeration>> {
    订单金额
    商品金额
    邮费金额
    跨店结算金额
}

enum 有效期类型 <<enumeration>> {
    绝对时间
    相对时间
}

enum 成本承担方类型 <<enumeration>> {
    平台
    商家
    主播
}

enum 发放策略 <<enumeration>> {
    自动发放
    手动发放
    兑换码
}

enum 规则对象类型 <<enumeration>> {
    商品
    分类
    人群
}

enum 规则类型 <<enumeration>> {
    适用
    排除
}

' 值对象
class 优惠规则 <<value object>> {
    -门槛类型: 门槛类型
    -门槛金额: BigDecimal
    -是否需要门槛: Boolean
    -优惠计算方式: 优惠计算方式
    -优惠值: BigDecimal
    -最大优惠金额: BigDecimal
    -是否阶梯优惠: Boolean
    -阶梯规则列表: List<阶梯规则>
    ..
    +检查门槛(金额: BigDecimal): Boolean
    +计算优惠(金额: BigDecimal): BigDecimal
    +验证规则(金额: BigDecimal): Boolean
    +equals(other: Object): Boolean
    +hashCode(): Integer
}

class 阶梯规则 <<value object>> {
    -门槛金额: BigDecimal
    -优惠金额: BigDecimal
    -优惠计算方式: 优惠计算方式
    ..
    +适用于(金额: BigDecimal): Boolean
    +计算优惠(金额: BigDecimal): BigDecimal
    +equals(other: Object): Boolean
    +hashCode(): Integer
}

class 有效期规则 <<value object>> {
    -有效期类型: 有效期类型
    -开始时间: LocalDateTime
    -结束时间: LocalDateTime
    -相对天数: Integer
    ..
    +是否有效(检查时间: LocalDateTime): Boolean
    +获取生效时间(发放时间: LocalDateTime): LocalDateTime
    +equals(other: Object): Boolean
    +hashCode(): Integer
}

class 成本承担方 <<value object>> {
    -承担方类型: 成本承担方类型
    -承担方ID: String
    -承担方名称: String
    ..
    +获取承担方信息(): Map<String, Object>
    +equals(other: Object): Boolean
    +hashCode(): Integer
}

' 实体
class 优惠券 <<entity>> {
    -ID: String
    -名称: String
    -描述: String
    -图片: String
    -状态: 优惠券状态
    -优惠规则: 优惠规则
    -有效期规则: 有效期规则
    -使用规则: 使用规则
    -领取规则: 领取规则
    -成本承担方: 成本承担方
    -发放策略: 发放策略
    -总发放限制: Integer
    -当前发放数量: Integer
    -单用户最大使用次数: Integer
    -总使用次数限制: Integer
    -创建时间: LocalDateTime
    -更新时间: LocalDateTime
    ..
    +可以发放(): Boolean
    +可以使用(用户: 用户, 订单: 订单): Boolean
    +计算优惠(金额: BigDecimal): BigDecimal
    +发放给用户(用户: 用户): 用户优惠券
    +更新状态(状态: 优惠券状态): void
    +增加发放数量(): void
    +equals(other: Object): Boolean
    +hashCode(): Integer
}

class 使用规则 <<value object>> {
    -商品适用规则: List<规则项>
    -商品排除规则: List<规则项>
    -分类适用规则: List<规则项>
    -分类排除规则: List<规则项>
    -人群适用规则: List<规则项>
    -人群排除规则: List<规则项>
    ..
    +可以使用(用户: 用户, 商品列表: List<商品>): Boolean
    +匹配商品规则(商品ID: String): Boolean
    +匹配分类规则(分类ID: String): Boolean
    +匹配人群规则(用户: 用户): Boolean
    +equals(other: Object): Boolean
    +hashCode(): Integer
}

class 领取规则 <<value object>> {
    -商品适用规则: List<规则项>
    -商品排除规则: List<规则项>
    -分类适用规则: List<规则项>
    -分类排除规则: List<规则项>
    -人群适用规则: List<规则项>
    -人群排除规则: List<规则项>
    ..
    +可以领取(用户: 用户, 商品列表: List<商品>): Boolean
    +匹配商品规则(商品ID: String): Boolean
    +匹配分类规则(分类ID: String): Boolean
    +匹配人群规则(用户: 用户): Boolean
    +equals(other: Object): Boolean
    +hashCode(): Integer
}

class 规则项 <<value object>> {
    -对象类型: 规则对象类型
    -规则类型: 规则类型
    -对象值: String
    ..
    +匹配(对象类型: 规则对象类型, 对象值: String): Boolean
    +equals(other: Object): Boolean
    +hashCode(): Integer
}

class 用户优惠券 <<entity>> {
    -ID: String
    -优惠券ID: String
    -用户ID: String
    -状态: 用户优惠券状态
    -发放时间: LocalDateTime
    -过期时间: LocalDateTime
    -使用时间: LocalDateTime
    -订单ID: String
    ..
    +是否可用(): Boolean
    +是否过期(): Boolean
    +使用(订单ID: String): void
    +过期(): void
    +equals(other: Object): Boolean
    +hashCode(): Integer
}

class 优惠券使用记录 <<entity>> {
    -ID: String
    -优惠券ID: String
    -用户优惠券ID: String
    -用户ID: String
    -订单ID: String
    -门槛金额: BigDecimal
    -原始金额: BigDecimal
    -优惠金额: BigDecimal
    -最终金额: BigDecimal
    -使用时间: LocalDateTime
    -成本承担方: 成本承担方
    ..
    +获取成本金额(): BigDecimal
    +获取成本承担方(): 成本承担方
    +equals(other: Object): Boolean
    +hashCode(): Integer
}

class 优惠券发放统计 <<entity>> {
    -优惠券ID: String
    -总发放数量: Integer
    -总使用数量: Integer
    -总过期数量: Integer
    -总成本: BigDecimal
    -最后更新时间: LocalDateTime
    ..
    +更新统计(): void
    +获取使用率(): BigDecimal
    +增加发放数量(): void
    +增加使用数量(): void
    +增加过期数量(): void
    +增加成本(金额: BigDecimal): void
    +equals(other: Object): Boolean
    +hashCode(): Integer
}

' 外部实体引用
class 用户 <<external>> {
    +获取ID(): String
    +获取类型(): String
    +获取VIP等级(): Integer
    +是否新用户(): Boolean
}

class 订单 <<external>> {
    +获取ID(): String
    +获取金额(): BigDecimal
    +获取商品列表(): List<商品>
}

class 商品 <<external>> {
    +获取ID(): String
    +获取分类ID(): String
    +获取价格(): BigDecimal
}

' 关系定义
优惠券 ||--|| 优惠规则 : 包含
优惠券 ||--|| 有效期规则 : 包含
优惠券 ||--|| 使用规则 : 包含
优惠券 ||--|| 领取规则 : 包含
优惠券 ||--|| 成本承担方 : 包含
优惠券 ||--o{ 用户优惠券 : 发放
用户优惠券 ||--o{ 优惠券使用记录 : 生成
优惠券 ||--|| 优惠券发放统计 : 跟踪

优惠券使用记录 ||--|| 成本承担方 : 记录

优惠规则 ||--o{ 阶梯规则 : 包含
使用规则 ||--o{ 规则项 : 包含
领取规则 ||--o{ 规则项 : 包含

' 依赖关系
优惠券 ..> 用户 : 使用
优惠券 ..> 订单 : 使用
使用规则 ..> 用户 : 验证
使用规则 ..> 商品 : 验证
领取规则 ..> 用户 : 验证

' 枚举关系
优惠规则 ||--|| 优惠计算方式 : 使用
优惠规则 ||--|| 门槛类型 : 使用
阶梯规则 ||--|| 优惠计算方式 : 使用
有效期规则 ||--|| 有效期类型 : 使用
成本承担方 ||--|| 成本承担方类型 : 使用
优惠券 ||--|| 优惠券状态 : 使用
优惠券 ||--|| 发放策略 : 使用
用户优惠券 ||--|| 用户优惠券状态 : 使用
规则项 ||--|| 规则对象类型 : 使用
规则项 ||--|| 规则类型 : 使用

' 样式定义
优惠券状态 -[hidden]- 用户优惠券状态
用户优惠券状态 -[hidden]- 优惠计算方式
优惠计算方式 -[hidden]- 门槛类型
门槛类型 -[hidden]- 有效期类型
有效期类型 -[hidden]- 成本承担方类型
成本承担方类型 -[hidden]- 发放策略
发放策略 -[hidden]- 规则对象类型
规则对象类型 -[hidden]- 规则类型

' 注释
note top of 优惠券 : 优惠券聚合根<br/>管理优惠券完整生命周期<br/>通过值对象和规则实体组合<br/>实现复杂业务规则

note top of 使用规则 : 使用规则值对象<br/>封装使用条件逻辑<br/>支持商品、分类、人群规则<br/>通过规则项组合实现复杂逻辑

note top of 领取规则 : 领取规则值对象<br/>封装领取条件逻辑<br/>控制用户领取资格<br/>通过规则项组合实现灵活配置

note top of 规则项 : 规则项值对象<br/>最小规则单元<br/>封装单个规则的匹配逻辑<br/>支持适用和排除两种类型

note top of 用户优惠券 : 用户优惠券实体<br/>管理用户优惠券状态<br/>记录领取和使用过程

note top of 优惠券使用记录 : 优惠券使用记录<br/>记录详细使用信息<br/>包含门槛和优惠金额<br/>用于成本核算和审计

note top of 优惠规则 : 优惠规则值对象<br/>统一管理门槛和优惠逻辑<br/>支持单一和阶梯优惠<br/>达到门槛即可享受优惠

note top of 阶梯规则 : 阶梯规则值对象<br/>定义不同门槛对应的优惠<br/>支持复杂的阶梯优惠策略

@enduml 